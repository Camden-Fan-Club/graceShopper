
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/index';
declare const prisma: unique symbol
export type PrismaPromise<A> = Promise<A> & {[prisma]: true}
type UnwrapPromise<P extends any> = P extends Promise<infer R> ? R : P
type UnwrapTuple<Tuple extends readonly unknown[]> = {
  [K in keyof Tuple]: K extends `${number}` ? Tuple[K] extends PrismaPromise<infer X> ? X : UnwrapPromise<Tuple[K]> : UnwrapPromise<Tuple[K]>
};


/**
 * Model Users
 * 
 */
export type Users = {
  id: number
  username: string
  password: string
  email: string
  is_admin: boolean | null
}

/**
 * Model Orders
 * 
 */
export type Orders = {
  id: number
  userId: number
  status: string
  is_cart: boolean
}

/**
 * Model Items
 * 
 */
export type Items = {
  id: number
  name: string
  description: string
  stockQty: number
  isFeatured: boolean
  onSale: boolean
  imageUrl: string
  categoryId: number
}

/**
 * Model Order_Items
 * 
 */
export type Order_Items = {
  id: number
  orderId: number
  itemId: number
  quantity: number
}

/**
 * Model Reviews
 * 
 */
export type Reviews = {
  id: number
  title: string
  stars: number
  content: string
  userId: number
}

/**
 * Model Item_Reviews
 * 
 */
export type Item_Reviews = {
  id: number
  itemId: number
  reviewId: number
}

/**
 * Model Category
 * 
 */
export type Category = {
  id: number
  name: string
}


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.users.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false
      > {
      /**
       * @private
       */
      private fetcher;
      /**
       * @private
       */
      private readonly dmmf;
      /**
       * @private
       */
      private connectionPromise?;
      /**
       * @private
       */
      private disconnectionPromise?;
      /**
       * @private
       */
      private readonly engineConfig;
      /**
       * @private
       */
      private readonly measurePerformance;

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.users.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<void>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<UnwrapTuple<P>>;

      /**
   * `prisma.users`: Exposes CRUD operations for the **Users** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.users.findMany()
    * ```
    */
  get users(): Prisma.UsersDelegate<GlobalReject>;

  /**
   * `prisma.orders`: Exposes CRUD operations for the **Orders** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Orders
    * const orders = await prisma.orders.findMany()
    * ```
    */
  get orders(): Prisma.OrdersDelegate<GlobalReject>;

  /**
   * `prisma.items`: Exposes CRUD operations for the **Items** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Items
    * const items = await prisma.items.findMany()
    * ```
    */
  get items(): Prisma.ItemsDelegate<GlobalReject>;

  /**
   * `prisma.order_Items`: Exposes CRUD operations for the **Order_Items** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Order_Items
    * const order_Items = await prisma.order_Items.findMany()
    * ```
    */
  get order_Items(): Prisma.Order_ItemsDelegate<GlobalReject>;

  /**
   * `prisma.reviews`: Exposes CRUD operations for the **Reviews** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Reviews
    * const reviews = await prisma.reviews.findMany()
    * ```
    */
  get reviews(): Prisma.ReviewsDelegate<GlobalReject>;

  /**
   * `prisma.item_Reviews`: Exposes CRUD operations for the **Item_Reviews** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Item_Reviews
    * const item_Reviews = await prisma.item_Reviews.findMany()
    * ```
    */
  get item_Reviews(): Prisma.Item_ReviewsDelegate<GlobalReject>;

  /**
   * `prisma.category`: Exposes CRUD operations for the **Category** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Categories
    * const categories = await prisma.category.findMany()
    * ```
    */
  get category(): Prisma.CategoryDelegate<GlobalReject>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket


  /**
   * Prisma Client JS version: 4.6.1
   * Query Engine version: 694eea289a8462c80264df36757e4fdc129b1b32
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = {
    [key in keyof T]: T[key] extends false | undefined | null ? never : key
  }[keyof T]

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Exact<A, W = unknown> = 
  W extends unknown ? A extends Narrowable ? Cast<A, W> : Cast<
  {[K in keyof A]: K extends keyof W ? Exact<A[K], W[K]> : never},
  {[K in keyof W]: K extends keyof A ? Exact<A[K], W[K]> : W[K]}>
  : never;

  type Narrowable = string | number | boolean | bigint;

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;

  export function validator<V>(): <S>(select: Exact<S, V>) => S;

  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>

  class PrismaClientFetcher {
    private readonly prisma;
    private readonly debug;
    private readonly hooks?;
    constructor(prisma: PrismaClient<any, any>, debug?: boolean, hooks?: Hooks | undefined);
    request<T>(document: any, dataPath?: string[], rootField?: string, typeName?: string, isList?: boolean, callsite?: string): Promise<T>;
    sanitizeMessage(message: string): string;
    protected unpack(document: any, data: any, path: string[], rootField?: string, isList?: boolean): any;
  }

  export const ModelName: {
    Users: 'Users',
    Orders: 'Orders',
    Items: 'Items',
    Order_Items: 'Order_Items',
    Reviews: 'Reviews',
    Item_Reviews: 'Item_Reviews',
    Category: 'Category'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends RejectOnNotFound
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     * @deprecated since 4.0.0. Use `findUniqueOrThrow`/`findFirstOrThrow` methods instead.
     * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  export type Hooks = {
    beforeRequest?: (options: { query: string, path: string[], rootField?: string, typeName?: string, document: any }) => any
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UsersCountOutputType
   */


  export type UsersCountOutputType = {
    orders: number
    reviews: number
  }

  export type UsersCountOutputTypeSelect = {
    orders?: boolean
    reviews?: boolean
  }

  export type UsersCountOutputTypeGetPayload<S extends boolean | null | undefined | UsersCountOutputTypeArgs, U = keyof S> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? UsersCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (UsersCountOutputTypeArgs)
    ? UsersCountOutputType 
    : S extends { select: any } & (UsersCountOutputTypeArgs)
      ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof UsersCountOutputType ? UsersCountOutputType[P] : never
  } 
      : UsersCountOutputType




  // Custom InputTypes

  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the UsersCountOutputType
     * 
    **/
    select?: UsersCountOutputTypeSelect | null
  }



  /**
   * Count Type OrdersCountOutputType
   */


  export type OrdersCountOutputType = {
    order_items: number
  }

  export type OrdersCountOutputTypeSelect = {
    order_items?: boolean
  }

  export type OrdersCountOutputTypeGetPayload<S extends boolean | null | undefined | OrdersCountOutputTypeArgs, U = keyof S> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? OrdersCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (OrdersCountOutputTypeArgs)
    ? OrdersCountOutputType 
    : S extends { select: any } & (OrdersCountOutputTypeArgs)
      ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof OrdersCountOutputType ? OrdersCountOutputType[P] : never
  } 
      : OrdersCountOutputType




  // Custom InputTypes

  /**
   * OrdersCountOutputType without action
   */
  export type OrdersCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the OrdersCountOutputType
     * 
    **/
    select?: OrdersCountOutputTypeSelect | null
  }



  /**
   * Count Type ItemsCountOutputType
   */


  export type ItemsCountOutputType = {
    order_items: number
    item_reviews: number
  }

  export type ItemsCountOutputTypeSelect = {
    order_items?: boolean
    item_reviews?: boolean
  }

  export type ItemsCountOutputTypeGetPayload<S extends boolean | null | undefined | ItemsCountOutputTypeArgs, U = keyof S> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? ItemsCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (ItemsCountOutputTypeArgs)
    ? ItemsCountOutputType 
    : S extends { select: any } & (ItemsCountOutputTypeArgs)
      ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof ItemsCountOutputType ? ItemsCountOutputType[P] : never
  } 
      : ItemsCountOutputType




  // Custom InputTypes

  /**
   * ItemsCountOutputType without action
   */
  export type ItemsCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the ItemsCountOutputType
     * 
    **/
    select?: ItemsCountOutputTypeSelect | null
  }



  /**
   * Count Type ReviewsCountOutputType
   */


  export type ReviewsCountOutputType = {
    item_reviews: number
  }

  export type ReviewsCountOutputTypeSelect = {
    item_reviews?: boolean
  }

  export type ReviewsCountOutputTypeGetPayload<S extends boolean | null | undefined | ReviewsCountOutputTypeArgs, U = keyof S> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? ReviewsCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (ReviewsCountOutputTypeArgs)
    ? ReviewsCountOutputType 
    : S extends { select: any } & (ReviewsCountOutputTypeArgs)
      ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof ReviewsCountOutputType ? ReviewsCountOutputType[P] : never
  } 
      : ReviewsCountOutputType




  // Custom InputTypes

  /**
   * ReviewsCountOutputType without action
   */
  export type ReviewsCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the ReviewsCountOutputType
     * 
    **/
    select?: ReviewsCountOutputTypeSelect | null
  }



  /**
   * Count Type CategoryCountOutputType
   */


  export type CategoryCountOutputType = {
    items: number
  }

  export type CategoryCountOutputTypeSelect = {
    items?: boolean
  }

  export type CategoryCountOutputTypeGetPayload<S extends boolean | null | undefined | CategoryCountOutputTypeArgs, U = keyof S> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? CategoryCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (CategoryCountOutputTypeArgs)
    ? CategoryCountOutputType 
    : S extends { select: any } & (CategoryCountOutputTypeArgs)
      ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof CategoryCountOutputType ? CategoryCountOutputType[P] : never
  } 
      : CategoryCountOutputType




  // Custom InputTypes

  /**
   * CategoryCountOutputType without action
   */
  export type CategoryCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the CategoryCountOutputType
     * 
    **/
    select?: CategoryCountOutputTypeSelect | null
  }



  /**
   * Models
   */

  /**
   * Model Users
   */


  export type AggregateUsers = {
    _count: UsersCountAggregateOutputType | null
    _avg: UsersAvgAggregateOutputType | null
    _sum: UsersSumAggregateOutputType | null
    _min: UsersMinAggregateOutputType | null
    _max: UsersMaxAggregateOutputType | null
  }

  export type UsersAvgAggregateOutputType = {
    id: number | null
  }

  export type UsersSumAggregateOutputType = {
    id: number | null
  }

  export type UsersMinAggregateOutputType = {
    id: number | null
    username: string | null
    password: string | null
    email: string | null
    is_admin: boolean | null
  }

  export type UsersMaxAggregateOutputType = {
    id: number | null
    username: string | null
    password: string | null
    email: string | null
    is_admin: boolean | null
  }

  export type UsersCountAggregateOutputType = {
    id: number
    username: number
    password: number
    email: number
    is_admin: number
    _all: number
  }


  export type UsersAvgAggregateInputType = {
    id?: true
  }

  export type UsersSumAggregateInputType = {
    id?: true
  }

  export type UsersMinAggregateInputType = {
    id?: true
    username?: true
    password?: true
    email?: true
    is_admin?: true
  }

  export type UsersMaxAggregateInputType = {
    id?: true
    username?: true
    password?: true
    email?: true
    is_admin?: true
  }

  export type UsersCountAggregateInputType = {
    id?: true
    username?: true
    password?: true
    email?: true
    is_admin?: true
    _all?: true
  }

  export type UsersAggregateArgs = {
    /**
     * Filter which Users to aggregate.
     * 
    **/
    where?: UsersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     * 
    **/
    orderBy?: Enumerable<UsersOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: UsersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UsersCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UsersAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UsersSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UsersMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UsersMaxAggregateInputType
  }

  export type GetUsersAggregateType<T extends UsersAggregateArgs> = {
        [P in keyof T & keyof AggregateUsers]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUsers[P]>
      : GetScalarType<T[P], AggregateUsers[P]>
  }




  export type UsersGroupByArgs = {
    where?: UsersWhereInput
    orderBy?: Enumerable<UsersOrderByWithAggregationInput>
    by: Array<UsersScalarFieldEnum>
    having?: UsersScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UsersCountAggregateInputType | true
    _avg?: UsersAvgAggregateInputType
    _sum?: UsersSumAggregateInputType
    _min?: UsersMinAggregateInputType
    _max?: UsersMaxAggregateInputType
  }


  export type UsersGroupByOutputType = {
    id: number
    username: string
    password: string
    email: string
    is_admin: boolean | null
    _count: UsersCountAggregateOutputType | null
    _avg: UsersAvgAggregateOutputType | null
    _sum: UsersSumAggregateOutputType | null
    _min: UsersMinAggregateOutputType | null
    _max: UsersMaxAggregateOutputType | null
  }

  type GetUsersGroupByPayload<T extends UsersGroupByArgs> = PrismaPromise<
    Array<
      PickArray<UsersGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UsersGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UsersGroupByOutputType[P]>
            : GetScalarType<T[P], UsersGroupByOutputType[P]>
        }
      >
    >


  export type UsersSelect = {
    id?: boolean
    username?: boolean
    password?: boolean
    email?: boolean
    is_admin?: boolean
    orders?: boolean | OrdersFindManyArgs
    reviews?: boolean | ReviewsFindManyArgs
    _count?: boolean | UsersCountOutputTypeArgs
  }


  export type UsersInclude = {
    orders?: boolean | OrdersFindManyArgs
    reviews?: boolean | ReviewsFindManyArgs
    _count?: boolean | UsersCountOutputTypeArgs
  } 

  export type UsersGetPayload<S extends boolean | null | undefined | UsersArgs, U = keyof S> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Users :
    S extends undefined ? never :
    S extends { include: any } & (UsersArgs | UsersFindManyArgs)
    ? Users  & {
    [P in TrueKeys<S['include']>]:
        P extends 'orders' ? Array < OrdersGetPayload<Exclude<S['include'], undefined | null>[P]>>  :
        P extends 'reviews' ? Array < ReviewsGetPayload<Exclude<S['include'], undefined | null>[P]>>  :
        P extends '_count' ? UsersCountOutputTypeGetPayload<Exclude<S['include'], undefined | null>[P]> :  never
  } 
    : S extends { select: any } & (UsersArgs | UsersFindManyArgs)
      ? {
    [P in TrueKeys<S['select']>]:
        P extends 'orders' ? Array < OrdersGetPayload<Exclude<S['select'], undefined | null>[P]>>  :
        P extends 'reviews' ? Array < ReviewsGetPayload<Exclude<S['select'], undefined | null>[P]>>  :
        P extends '_count' ? UsersCountOutputTypeGetPayload<Exclude<S['select'], undefined | null>[P]> :  P extends keyof Users ? Users[P] : never
  } 
      : Users


  type UsersCountArgs = Merge<
    Omit<UsersFindManyArgs, 'select' | 'include'> & {
      select?: UsersCountAggregateInputType | true
    }
  >

  export interface UsersDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Users that matches the filter.
     * @param {UsersFindUniqueArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UsersFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, UsersFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Users'> extends True ? Prisma__UsersClient<UsersGetPayload<T>> : Prisma__UsersClient<UsersGetPayload<T> | null, null>

    /**
     * Find the first Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersFindFirstArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UsersFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, UsersFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Users'> extends True ? Prisma__UsersClient<UsersGetPayload<T>> : Prisma__UsersClient<UsersGetPayload<T> | null, null>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.users.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.users.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const usersWithIdOnly = await prisma.users.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends UsersFindManyArgs>(
      args?: SelectSubset<T, UsersFindManyArgs>
    ): PrismaPromise<Array<UsersGetPayload<T>>>

    /**
     * Create a Users.
     * @param {UsersCreateArgs} args - Arguments to create a Users.
     * @example
     * // Create one Users
     * const Users = await prisma.users.create({
     *   data: {
     *     // ... data to create a Users
     *   }
     * })
     * 
    **/
    create<T extends UsersCreateArgs>(
      args: SelectSubset<T, UsersCreateArgs>
    ): Prisma__UsersClient<UsersGetPayload<T>>

    /**
     * Create many Users.
     *     @param {UsersCreateManyArgs} args - Arguments to create many Users.
     *     @example
     *     // Create many Users
     *     const users = await prisma.users.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends UsersCreateManyArgs>(
      args?: SelectSubset<T, UsersCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Users.
     * @param {UsersDeleteArgs} args - Arguments to delete one Users.
     * @example
     * // Delete one Users
     * const Users = await prisma.users.delete({
     *   where: {
     *     // ... filter to delete one Users
     *   }
     * })
     * 
    **/
    delete<T extends UsersDeleteArgs>(
      args: SelectSubset<T, UsersDeleteArgs>
    ): Prisma__UsersClient<UsersGetPayload<T>>

    /**
     * Update one Users.
     * @param {UsersUpdateArgs} args - Arguments to update one Users.
     * @example
     * // Update one Users
     * const users = await prisma.users.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UsersUpdateArgs>(
      args: SelectSubset<T, UsersUpdateArgs>
    ): Prisma__UsersClient<UsersGetPayload<T>>

    /**
     * Delete zero or more Users.
     * @param {UsersDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.users.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UsersDeleteManyArgs>(
      args?: SelectSubset<T, UsersDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const users = await prisma.users.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UsersUpdateManyArgs>(
      args: SelectSubset<T, UsersUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Users.
     * @param {UsersUpsertArgs} args - Arguments to update or create a Users.
     * @example
     * // Update or create a Users
     * const users = await prisma.users.upsert({
     *   create: {
     *     // ... data to create a Users
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Users we want to update
     *   }
     * })
    **/
    upsert<T extends UsersUpsertArgs>(
      args: SelectSubset<T, UsersUpsertArgs>
    ): Prisma__UsersClient<UsersGetPayload<T>>

    /**
     * Find one Users that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {UsersFindUniqueOrThrowArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends UsersFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, UsersFindUniqueOrThrowArgs>
    ): Prisma__UsersClient<UsersGetPayload<T>>

    /**
     * Find the first Users that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersFindFirstOrThrowArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends UsersFindFirstOrThrowArgs>(
      args?: SelectSubset<T, UsersFindFirstOrThrowArgs>
    ): Prisma__UsersClient<UsersGetPayload<T>>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.users.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UsersCountArgs>(
      args?: Subset<T, UsersCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UsersCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UsersAggregateArgs>(args: Subset<T, UsersAggregateArgs>): PrismaPromise<GetUsersAggregateType<T>>

    /**
     * Group by Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UsersGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UsersGroupByArgs['orderBy'] }
        : { orderBy?: UsersGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UsersGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUsersGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Users.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__UsersClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    orders<T extends OrdersFindManyArgs= {}>(args?: Subset<T, OrdersFindManyArgs>): PrismaPromise<Array<OrdersGetPayload<T>>| Null>;

    reviews<T extends ReviewsFindManyArgs= {}>(args?: Subset<T, ReviewsFindManyArgs>): PrismaPromise<Array<ReviewsGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Users base type for findUnique actions
   */
  export type UsersFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Users
     * 
    **/
    select?: UsersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UsersInclude | null
    /**
     * Filter, which Users to fetch.
     * 
    **/
    where: UsersWhereUniqueInput
  }

  /**
   * Users: findUnique
   */
  export interface UsersFindUniqueArgs extends UsersFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Users base type for findFirst actions
   */
  export type UsersFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Users
     * 
    **/
    select?: UsersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UsersInclude | null
    /**
     * Filter, which Users to fetch.
     * 
    **/
    where?: UsersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     * 
    **/
    orderBy?: Enumerable<UsersOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     * 
    **/
    cursor?: UsersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     * 
    **/
    distinct?: Enumerable<UsersScalarFieldEnum>
  }

  /**
   * Users: findFirst
   */
  export interface UsersFindFirstArgs extends UsersFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Users findMany
   */
  export type UsersFindManyArgs = {
    /**
     * Select specific fields to fetch from the Users
     * 
    **/
    select?: UsersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UsersInclude | null
    /**
     * Filter, which Users to fetch.
     * 
    **/
    where?: UsersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     * 
    **/
    orderBy?: Enumerable<UsersOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     * 
    **/
    cursor?: UsersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     * 
    **/
    skip?: number
    distinct?: Enumerable<UsersScalarFieldEnum>
  }


  /**
   * Users create
   */
  export type UsersCreateArgs = {
    /**
     * Select specific fields to fetch from the Users
     * 
    **/
    select?: UsersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UsersInclude | null
    /**
     * The data needed to create a Users.
     * 
    **/
    data: XOR<UsersCreateInput, UsersUncheckedCreateInput>
  }


  /**
   * Users createMany
   */
  export type UsersCreateManyArgs = {
    /**
     * The data used to create many Users.
     * 
    **/
    data: Enumerable<UsersCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Users update
   */
  export type UsersUpdateArgs = {
    /**
     * Select specific fields to fetch from the Users
     * 
    **/
    select?: UsersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UsersInclude | null
    /**
     * The data needed to update a Users.
     * 
    **/
    data: XOR<UsersUpdateInput, UsersUncheckedUpdateInput>
    /**
     * Choose, which Users to update.
     * 
    **/
    where: UsersWhereUniqueInput
  }


  /**
   * Users updateMany
   */
  export type UsersUpdateManyArgs = {
    /**
     * The data used to update Users.
     * 
    **/
    data: XOR<UsersUpdateManyMutationInput, UsersUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     * 
    **/
    where?: UsersWhereInput
  }


  /**
   * Users upsert
   */
  export type UsersUpsertArgs = {
    /**
     * Select specific fields to fetch from the Users
     * 
    **/
    select?: UsersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UsersInclude | null
    /**
     * The filter to search for the Users to update in case it exists.
     * 
    **/
    where: UsersWhereUniqueInput
    /**
     * In case the Users found by the `where` argument doesn't exist, create a new Users with this data.
     * 
    **/
    create: XOR<UsersCreateInput, UsersUncheckedCreateInput>
    /**
     * In case the Users was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<UsersUpdateInput, UsersUncheckedUpdateInput>
  }


  /**
   * Users delete
   */
  export type UsersDeleteArgs = {
    /**
     * Select specific fields to fetch from the Users
     * 
    **/
    select?: UsersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UsersInclude | null
    /**
     * Filter which Users to delete.
     * 
    **/
    where: UsersWhereUniqueInput
  }


  /**
   * Users deleteMany
   */
  export type UsersDeleteManyArgs = {
    /**
     * Filter which Users to delete
     * 
    **/
    where?: UsersWhereInput
  }


  /**
   * Users: findUniqueOrThrow
   */
  export type UsersFindUniqueOrThrowArgs = UsersFindUniqueArgsBase
      

  /**
   * Users: findFirstOrThrow
   */
  export type UsersFindFirstOrThrowArgs = UsersFindFirstArgsBase
      

  /**
   * Users without action
   */
  export type UsersArgs = {
    /**
     * Select specific fields to fetch from the Users
     * 
    **/
    select?: UsersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UsersInclude | null
  }



  /**
   * Model Orders
   */


  export type AggregateOrders = {
    _count: OrdersCountAggregateOutputType | null
    _avg: OrdersAvgAggregateOutputType | null
    _sum: OrdersSumAggregateOutputType | null
    _min: OrdersMinAggregateOutputType | null
    _max: OrdersMaxAggregateOutputType | null
  }

  export type OrdersAvgAggregateOutputType = {
    id: number | null
    userId: number | null
  }

  export type OrdersSumAggregateOutputType = {
    id: number | null
    userId: number | null
  }

  export type OrdersMinAggregateOutputType = {
    id: number | null
    userId: number | null
    status: string | null
    is_cart: boolean | null
  }

  export type OrdersMaxAggregateOutputType = {
    id: number | null
    userId: number | null
    status: string | null
    is_cart: boolean | null
  }

  export type OrdersCountAggregateOutputType = {
    id: number
    userId: number
    status: number
    is_cart: number
    _all: number
  }


  export type OrdersAvgAggregateInputType = {
    id?: true
    userId?: true
  }

  export type OrdersSumAggregateInputType = {
    id?: true
    userId?: true
  }

  export type OrdersMinAggregateInputType = {
    id?: true
    userId?: true
    status?: true
    is_cart?: true
  }

  export type OrdersMaxAggregateInputType = {
    id?: true
    userId?: true
    status?: true
    is_cart?: true
  }

  export type OrdersCountAggregateInputType = {
    id?: true
    userId?: true
    status?: true
    is_cart?: true
    _all?: true
  }

  export type OrdersAggregateArgs = {
    /**
     * Filter which Orders to aggregate.
     * 
    **/
    where?: OrdersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Orders to fetch.
     * 
    **/
    orderBy?: Enumerable<OrdersOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: OrdersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Orders from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Orders.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Orders
    **/
    _count?: true | OrdersCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: OrdersAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: OrdersSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: OrdersMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: OrdersMaxAggregateInputType
  }

  export type GetOrdersAggregateType<T extends OrdersAggregateArgs> = {
        [P in keyof T & keyof AggregateOrders]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateOrders[P]>
      : GetScalarType<T[P], AggregateOrders[P]>
  }




  export type OrdersGroupByArgs = {
    where?: OrdersWhereInput
    orderBy?: Enumerable<OrdersOrderByWithAggregationInput>
    by: Array<OrdersScalarFieldEnum>
    having?: OrdersScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: OrdersCountAggregateInputType | true
    _avg?: OrdersAvgAggregateInputType
    _sum?: OrdersSumAggregateInputType
    _min?: OrdersMinAggregateInputType
    _max?: OrdersMaxAggregateInputType
  }


  export type OrdersGroupByOutputType = {
    id: number
    userId: number
    status: string
    is_cart: boolean
    _count: OrdersCountAggregateOutputType | null
    _avg: OrdersAvgAggregateOutputType | null
    _sum: OrdersSumAggregateOutputType | null
    _min: OrdersMinAggregateOutputType | null
    _max: OrdersMaxAggregateOutputType | null
  }

  type GetOrdersGroupByPayload<T extends OrdersGroupByArgs> = PrismaPromise<
    Array<
      PickArray<OrdersGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof OrdersGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], OrdersGroupByOutputType[P]>
            : GetScalarType<T[P], OrdersGroupByOutputType[P]>
        }
      >
    >


  export type OrdersSelect = {
    id?: boolean
    userId?: boolean
    status?: boolean
    is_cart?: boolean
    users?: boolean | UsersArgs
    order_items?: boolean | Order_ItemsFindManyArgs
    _count?: boolean | OrdersCountOutputTypeArgs
  }


  export type OrdersInclude = {
    users?: boolean | UsersArgs
    order_items?: boolean | Order_ItemsFindManyArgs
    _count?: boolean | OrdersCountOutputTypeArgs
  } 

  export type OrdersGetPayload<S extends boolean | null | undefined | OrdersArgs, U = keyof S> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Orders :
    S extends undefined ? never :
    S extends { include: any } & (OrdersArgs | OrdersFindManyArgs)
    ? Orders  & {
    [P in TrueKeys<S['include']>]:
        P extends 'users' ? UsersGetPayload<Exclude<S['include'], undefined | null>[P]> | null :
        P extends 'order_items' ? Array < Order_ItemsGetPayload<Exclude<S['include'], undefined | null>[P]>>  :
        P extends '_count' ? OrdersCountOutputTypeGetPayload<Exclude<S['include'], undefined | null>[P]> :  never
  } 
    : S extends { select: any } & (OrdersArgs | OrdersFindManyArgs)
      ? {
    [P in TrueKeys<S['select']>]:
        P extends 'users' ? UsersGetPayload<Exclude<S['select'], undefined | null>[P]> | null :
        P extends 'order_items' ? Array < Order_ItemsGetPayload<Exclude<S['select'], undefined | null>[P]>>  :
        P extends '_count' ? OrdersCountOutputTypeGetPayload<Exclude<S['select'], undefined | null>[P]> :  P extends keyof Orders ? Orders[P] : never
  } 
      : Orders


  type OrdersCountArgs = Merge<
    Omit<OrdersFindManyArgs, 'select' | 'include'> & {
      select?: OrdersCountAggregateInputType | true
    }
  >

  export interface OrdersDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Orders that matches the filter.
     * @param {OrdersFindUniqueArgs} args - Arguments to find a Orders
     * @example
     * // Get one Orders
     * const orders = await prisma.orders.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends OrdersFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, OrdersFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Orders'> extends True ? Prisma__OrdersClient<OrdersGetPayload<T>> : Prisma__OrdersClient<OrdersGetPayload<T> | null, null>

    /**
     * Find the first Orders that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrdersFindFirstArgs} args - Arguments to find a Orders
     * @example
     * // Get one Orders
     * const orders = await prisma.orders.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends OrdersFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, OrdersFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Orders'> extends True ? Prisma__OrdersClient<OrdersGetPayload<T>> : Prisma__OrdersClient<OrdersGetPayload<T> | null, null>

    /**
     * Find zero or more Orders that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrdersFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Orders
     * const orders = await prisma.orders.findMany()
     * 
     * // Get first 10 Orders
     * const orders = await prisma.orders.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const ordersWithIdOnly = await prisma.orders.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends OrdersFindManyArgs>(
      args?: SelectSubset<T, OrdersFindManyArgs>
    ): PrismaPromise<Array<OrdersGetPayload<T>>>

    /**
     * Create a Orders.
     * @param {OrdersCreateArgs} args - Arguments to create a Orders.
     * @example
     * // Create one Orders
     * const Orders = await prisma.orders.create({
     *   data: {
     *     // ... data to create a Orders
     *   }
     * })
     * 
    **/
    create<T extends OrdersCreateArgs>(
      args: SelectSubset<T, OrdersCreateArgs>
    ): Prisma__OrdersClient<OrdersGetPayload<T>>

    /**
     * Create many Orders.
     *     @param {OrdersCreateManyArgs} args - Arguments to create many Orders.
     *     @example
     *     // Create many Orders
     *     const orders = await prisma.orders.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends OrdersCreateManyArgs>(
      args?: SelectSubset<T, OrdersCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Orders.
     * @param {OrdersDeleteArgs} args - Arguments to delete one Orders.
     * @example
     * // Delete one Orders
     * const Orders = await prisma.orders.delete({
     *   where: {
     *     // ... filter to delete one Orders
     *   }
     * })
     * 
    **/
    delete<T extends OrdersDeleteArgs>(
      args: SelectSubset<T, OrdersDeleteArgs>
    ): Prisma__OrdersClient<OrdersGetPayload<T>>

    /**
     * Update one Orders.
     * @param {OrdersUpdateArgs} args - Arguments to update one Orders.
     * @example
     * // Update one Orders
     * const orders = await prisma.orders.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends OrdersUpdateArgs>(
      args: SelectSubset<T, OrdersUpdateArgs>
    ): Prisma__OrdersClient<OrdersGetPayload<T>>

    /**
     * Delete zero or more Orders.
     * @param {OrdersDeleteManyArgs} args - Arguments to filter Orders to delete.
     * @example
     * // Delete a few Orders
     * const { count } = await prisma.orders.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends OrdersDeleteManyArgs>(
      args?: SelectSubset<T, OrdersDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Orders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrdersUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Orders
     * const orders = await prisma.orders.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends OrdersUpdateManyArgs>(
      args: SelectSubset<T, OrdersUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Orders.
     * @param {OrdersUpsertArgs} args - Arguments to update or create a Orders.
     * @example
     * // Update or create a Orders
     * const orders = await prisma.orders.upsert({
     *   create: {
     *     // ... data to create a Orders
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Orders we want to update
     *   }
     * })
    **/
    upsert<T extends OrdersUpsertArgs>(
      args: SelectSubset<T, OrdersUpsertArgs>
    ): Prisma__OrdersClient<OrdersGetPayload<T>>

    /**
     * Find one Orders that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {OrdersFindUniqueOrThrowArgs} args - Arguments to find a Orders
     * @example
     * // Get one Orders
     * const orders = await prisma.orders.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends OrdersFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, OrdersFindUniqueOrThrowArgs>
    ): Prisma__OrdersClient<OrdersGetPayload<T>>

    /**
     * Find the first Orders that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrdersFindFirstOrThrowArgs} args - Arguments to find a Orders
     * @example
     * // Get one Orders
     * const orders = await prisma.orders.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends OrdersFindFirstOrThrowArgs>(
      args?: SelectSubset<T, OrdersFindFirstOrThrowArgs>
    ): Prisma__OrdersClient<OrdersGetPayload<T>>

    /**
     * Count the number of Orders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrdersCountArgs} args - Arguments to filter Orders to count.
     * @example
     * // Count the number of Orders
     * const count = await prisma.orders.count({
     *   where: {
     *     // ... the filter for the Orders we want to count
     *   }
     * })
    **/
    count<T extends OrdersCountArgs>(
      args?: Subset<T, OrdersCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], OrdersCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Orders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrdersAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends OrdersAggregateArgs>(args: Subset<T, OrdersAggregateArgs>): PrismaPromise<GetOrdersAggregateType<T>>

    /**
     * Group by Orders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrdersGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends OrdersGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: OrdersGroupByArgs['orderBy'] }
        : { orderBy?: OrdersGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, OrdersGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetOrdersGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Orders.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__OrdersClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    users<T extends UsersArgs= {}>(args?: Subset<T, UsersArgs>): Prisma__UsersClient<UsersGetPayload<T> | Null>;

    order_items<T extends Order_ItemsFindManyArgs= {}>(args?: Subset<T, Order_ItemsFindManyArgs>): PrismaPromise<Array<Order_ItemsGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Orders base type for findUnique actions
   */
  export type OrdersFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Orders
     * 
    **/
    select?: OrdersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: OrdersInclude | null
    /**
     * Filter, which Orders to fetch.
     * 
    **/
    where: OrdersWhereUniqueInput
  }

  /**
   * Orders: findUnique
   */
  export interface OrdersFindUniqueArgs extends OrdersFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Orders base type for findFirst actions
   */
  export type OrdersFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Orders
     * 
    **/
    select?: OrdersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: OrdersInclude | null
    /**
     * Filter, which Orders to fetch.
     * 
    **/
    where?: OrdersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Orders to fetch.
     * 
    **/
    orderBy?: Enumerable<OrdersOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Orders.
     * 
    **/
    cursor?: OrdersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Orders from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Orders.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Orders.
     * 
    **/
    distinct?: Enumerable<OrdersScalarFieldEnum>
  }

  /**
   * Orders: findFirst
   */
  export interface OrdersFindFirstArgs extends OrdersFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Orders findMany
   */
  export type OrdersFindManyArgs = {
    /**
     * Select specific fields to fetch from the Orders
     * 
    **/
    select?: OrdersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: OrdersInclude | null
    /**
     * Filter, which Orders to fetch.
     * 
    **/
    where?: OrdersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Orders to fetch.
     * 
    **/
    orderBy?: Enumerable<OrdersOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Orders.
     * 
    **/
    cursor?: OrdersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Orders from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Orders.
     * 
    **/
    skip?: number
    distinct?: Enumerable<OrdersScalarFieldEnum>
  }


  /**
   * Orders create
   */
  export type OrdersCreateArgs = {
    /**
     * Select specific fields to fetch from the Orders
     * 
    **/
    select?: OrdersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: OrdersInclude | null
    /**
     * The data needed to create a Orders.
     * 
    **/
    data: XOR<OrdersCreateInput, OrdersUncheckedCreateInput>
  }


  /**
   * Orders createMany
   */
  export type OrdersCreateManyArgs = {
    /**
     * The data used to create many Orders.
     * 
    **/
    data: Enumerable<OrdersCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Orders update
   */
  export type OrdersUpdateArgs = {
    /**
     * Select specific fields to fetch from the Orders
     * 
    **/
    select?: OrdersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: OrdersInclude | null
    /**
     * The data needed to update a Orders.
     * 
    **/
    data: XOR<OrdersUpdateInput, OrdersUncheckedUpdateInput>
    /**
     * Choose, which Orders to update.
     * 
    **/
    where: OrdersWhereUniqueInput
  }


  /**
   * Orders updateMany
   */
  export type OrdersUpdateManyArgs = {
    /**
     * The data used to update Orders.
     * 
    **/
    data: XOR<OrdersUpdateManyMutationInput, OrdersUncheckedUpdateManyInput>
    /**
     * Filter which Orders to update
     * 
    **/
    where?: OrdersWhereInput
  }


  /**
   * Orders upsert
   */
  export type OrdersUpsertArgs = {
    /**
     * Select specific fields to fetch from the Orders
     * 
    **/
    select?: OrdersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: OrdersInclude | null
    /**
     * The filter to search for the Orders to update in case it exists.
     * 
    **/
    where: OrdersWhereUniqueInput
    /**
     * In case the Orders found by the `where` argument doesn't exist, create a new Orders with this data.
     * 
    **/
    create: XOR<OrdersCreateInput, OrdersUncheckedCreateInput>
    /**
     * In case the Orders was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<OrdersUpdateInput, OrdersUncheckedUpdateInput>
  }


  /**
   * Orders delete
   */
  export type OrdersDeleteArgs = {
    /**
     * Select specific fields to fetch from the Orders
     * 
    **/
    select?: OrdersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: OrdersInclude | null
    /**
     * Filter which Orders to delete.
     * 
    **/
    where: OrdersWhereUniqueInput
  }


  /**
   * Orders deleteMany
   */
  export type OrdersDeleteManyArgs = {
    /**
     * Filter which Orders to delete
     * 
    **/
    where?: OrdersWhereInput
  }


  /**
   * Orders: findUniqueOrThrow
   */
  export type OrdersFindUniqueOrThrowArgs = OrdersFindUniqueArgsBase
      

  /**
   * Orders: findFirstOrThrow
   */
  export type OrdersFindFirstOrThrowArgs = OrdersFindFirstArgsBase
      

  /**
   * Orders without action
   */
  export type OrdersArgs = {
    /**
     * Select specific fields to fetch from the Orders
     * 
    **/
    select?: OrdersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: OrdersInclude | null
  }



  /**
   * Model Items
   */


  export type AggregateItems = {
    _count: ItemsCountAggregateOutputType | null
    _avg: ItemsAvgAggregateOutputType | null
    _sum: ItemsSumAggregateOutputType | null
    _min: ItemsMinAggregateOutputType | null
    _max: ItemsMaxAggregateOutputType | null
  }

  export type ItemsAvgAggregateOutputType = {
    id: number | null
    stockQty: number | null
    categoryId: number | null
  }

  export type ItemsSumAggregateOutputType = {
    id: number | null
    stockQty: number | null
    categoryId: number | null
  }

  export type ItemsMinAggregateOutputType = {
    id: number | null
    name: string | null
    description: string | null
    stockQty: number | null
    isFeatured: boolean | null
    onSale: boolean | null
    imageUrl: string | null
    categoryId: number | null
  }

  export type ItemsMaxAggregateOutputType = {
    id: number | null
    name: string | null
    description: string | null
    stockQty: number | null
    isFeatured: boolean | null
    onSale: boolean | null
    imageUrl: string | null
    categoryId: number | null
  }

  export type ItemsCountAggregateOutputType = {
    id: number
    name: number
    description: number
    stockQty: number
    isFeatured: number
    onSale: number
    imageUrl: number
    categoryId: number
    _all: number
  }


  export type ItemsAvgAggregateInputType = {
    id?: true
    stockQty?: true
    categoryId?: true
  }

  export type ItemsSumAggregateInputType = {
    id?: true
    stockQty?: true
    categoryId?: true
  }

  export type ItemsMinAggregateInputType = {
    id?: true
    name?: true
    description?: true
    stockQty?: true
    isFeatured?: true
    onSale?: true
    imageUrl?: true
    categoryId?: true
  }

  export type ItemsMaxAggregateInputType = {
    id?: true
    name?: true
    description?: true
    stockQty?: true
    isFeatured?: true
    onSale?: true
    imageUrl?: true
    categoryId?: true
  }

  export type ItemsCountAggregateInputType = {
    id?: true
    name?: true
    description?: true
    stockQty?: true
    isFeatured?: true
    onSale?: true
    imageUrl?: true
    categoryId?: true
    _all?: true
  }

  export type ItemsAggregateArgs = {
    /**
     * Filter which Items to aggregate.
     * 
    **/
    where?: ItemsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Items to fetch.
     * 
    **/
    orderBy?: Enumerable<ItemsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: ItemsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Items from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Items.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Items
    **/
    _count?: true | ItemsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ItemsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ItemsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ItemsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ItemsMaxAggregateInputType
  }

  export type GetItemsAggregateType<T extends ItemsAggregateArgs> = {
        [P in keyof T & keyof AggregateItems]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateItems[P]>
      : GetScalarType<T[P], AggregateItems[P]>
  }




  export type ItemsGroupByArgs = {
    where?: ItemsWhereInput
    orderBy?: Enumerable<ItemsOrderByWithAggregationInput>
    by: Array<ItemsScalarFieldEnum>
    having?: ItemsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ItemsCountAggregateInputType | true
    _avg?: ItemsAvgAggregateInputType
    _sum?: ItemsSumAggregateInputType
    _min?: ItemsMinAggregateInputType
    _max?: ItemsMaxAggregateInputType
  }


  export type ItemsGroupByOutputType = {
    id: number
    name: string
    description: string
    stockQty: number
    isFeatured: boolean
    onSale: boolean
    imageUrl: string
    categoryId: number
    _count: ItemsCountAggregateOutputType | null
    _avg: ItemsAvgAggregateOutputType | null
    _sum: ItemsSumAggregateOutputType | null
    _min: ItemsMinAggregateOutputType | null
    _max: ItemsMaxAggregateOutputType | null
  }

  type GetItemsGroupByPayload<T extends ItemsGroupByArgs> = PrismaPromise<
    Array<
      PickArray<ItemsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ItemsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ItemsGroupByOutputType[P]>
            : GetScalarType<T[P], ItemsGroupByOutputType[P]>
        }
      >
    >


  export type ItemsSelect = {
    id?: boolean
    name?: boolean
    description?: boolean
    stockQty?: boolean
    isFeatured?: boolean
    onSale?: boolean
    imageUrl?: boolean
    categoryId?: boolean
    order_items?: boolean | Order_ItemsFindManyArgs
    item_reviews?: boolean | Item_ReviewsFindManyArgs
    category?: boolean | CategoryArgs
    _count?: boolean | ItemsCountOutputTypeArgs
  }


  export type ItemsInclude = {
    order_items?: boolean | Order_ItemsFindManyArgs
    item_reviews?: boolean | Item_ReviewsFindManyArgs
    category?: boolean | CategoryArgs
    _count?: boolean | ItemsCountOutputTypeArgs
  } 

  export type ItemsGetPayload<S extends boolean | null | undefined | ItemsArgs, U = keyof S> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Items :
    S extends undefined ? never :
    S extends { include: any } & (ItemsArgs | ItemsFindManyArgs)
    ? Items  & {
    [P in TrueKeys<S['include']>]:
        P extends 'order_items' ? Array < Order_ItemsGetPayload<Exclude<S['include'], undefined | null>[P]>>  :
        P extends 'item_reviews' ? Array < Item_ReviewsGetPayload<Exclude<S['include'], undefined | null>[P]>>  :
        P extends 'category' ? CategoryGetPayload<Exclude<S['include'], undefined | null>[P]> | null :
        P extends '_count' ? ItemsCountOutputTypeGetPayload<Exclude<S['include'], undefined | null>[P]> :  never
  } 
    : S extends { select: any } & (ItemsArgs | ItemsFindManyArgs)
      ? {
    [P in TrueKeys<S['select']>]:
        P extends 'order_items' ? Array < Order_ItemsGetPayload<Exclude<S['select'], undefined | null>[P]>>  :
        P extends 'item_reviews' ? Array < Item_ReviewsGetPayload<Exclude<S['select'], undefined | null>[P]>>  :
        P extends 'category' ? CategoryGetPayload<Exclude<S['select'], undefined | null>[P]> | null :
        P extends '_count' ? ItemsCountOutputTypeGetPayload<Exclude<S['select'], undefined | null>[P]> :  P extends keyof Items ? Items[P] : never
  } 
      : Items


  type ItemsCountArgs = Merge<
    Omit<ItemsFindManyArgs, 'select' | 'include'> & {
      select?: ItemsCountAggregateInputType | true
    }
  >

  export interface ItemsDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Items that matches the filter.
     * @param {ItemsFindUniqueArgs} args - Arguments to find a Items
     * @example
     * // Get one Items
     * const items = await prisma.items.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ItemsFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, ItemsFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Items'> extends True ? Prisma__ItemsClient<ItemsGetPayload<T>> : Prisma__ItemsClient<ItemsGetPayload<T> | null, null>

    /**
     * Find the first Items that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ItemsFindFirstArgs} args - Arguments to find a Items
     * @example
     * // Get one Items
     * const items = await prisma.items.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ItemsFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, ItemsFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Items'> extends True ? Prisma__ItemsClient<ItemsGetPayload<T>> : Prisma__ItemsClient<ItemsGetPayload<T> | null, null>

    /**
     * Find zero or more Items that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ItemsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Items
     * const items = await prisma.items.findMany()
     * 
     * // Get first 10 Items
     * const items = await prisma.items.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const itemsWithIdOnly = await prisma.items.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ItemsFindManyArgs>(
      args?: SelectSubset<T, ItemsFindManyArgs>
    ): PrismaPromise<Array<ItemsGetPayload<T>>>

    /**
     * Create a Items.
     * @param {ItemsCreateArgs} args - Arguments to create a Items.
     * @example
     * // Create one Items
     * const Items = await prisma.items.create({
     *   data: {
     *     // ... data to create a Items
     *   }
     * })
     * 
    **/
    create<T extends ItemsCreateArgs>(
      args: SelectSubset<T, ItemsCreateArgs>
    ): Prisma__ItemsClient<ItemsGetPayload<T>>

    /**
     * Create many Items.
     *     @param {ItemsCreateManyArgs} args - Arguments to create many Items.
     *     @example
     *     // Create many Items
     *     const items = await prisma.items.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ItemsCreateManyArgs>(
      args?: SelectSubset<T, ItemsCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Items.
     * @param {ItemsDeleteArgs} args - Arguments to delete one Items.
     * @example
     * // Delete one Items
     * const Items = await prisma.items.delete({
     *   where: {
     *     // ... filter to delete one Items
     *   }
     * })
     * 
    **/
    delete<T extends ItemsDeleteArgs>(
      args: SelectSubset<T, ItemsDeleteArgs>
    ): Prisma__ItemsClient<ItemsGetPayload<T>>

    /**
     * Update one Items.
     * @param {ItemsUpdateArgs} args - Arguments to update one Items.
     * @example
     * // Update one Items
     * const items = await prisma.items.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ItemsUpdateArgs>(
      args: SelectSubset<T, ItemsUpdateArgs>
    ): Prisma__ItemsClient<ItemsGetPayload<T>>

    /**
     * Delete zero or more Items.
     * @param {ItemsDeleteManyArgs} args - Arguments to filter Items to delete.
     * @example
     * // Delete a few Items
     * const { count } = await prisma.items.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ItemsDeleteManyArgs>(
      args?: SelectSubset<T, ItemsDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Items.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ItemsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Items
     * const items = await prisma.items.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ItemsUpdateManyArgs>(
      args: SelectSubset<T, ItemsUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Items.
     * @param {ItemsUpsertArgs} args - Arguments to update or create a Items.
     * @example
     * // Update or create a Items
     * const items = await prisma.items.upsert({
     *   create: {
     *     // ... data to create a Items
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Items we want to update
     *   }
     * })
    **/
    upsert<T extends ItemsUpsertArgs>(
      args: SelectSubset<T, ItemsUpsertArgs>
    ): Prisma__ItemsClient<ItemsGetPayload<T>>

    /**
     * Find one Items that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {ItemsFindUniqueOrThrowArgs} args - Arguments to find a Items
     * @example
     * // Get one Items
     * const items = await prisma.items.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ItemsFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, ItemsFindUniqueOrThrowArgs>
    ): Prisma__ItemsClient<ItemsGetPayload<T>>

    /**
     * Find the first Items that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ItemsFindFirstOrThrowArgs} args - Arguments to find a Items
     * @example
     * // Get one Items
     * const items = await prisma.items.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ItemsFindFirstOrThrowArgs>(
      args?: SelectSubset<T, ItemsFindFirstOrThrowArgs>
    ): Prisma__ItemsClient<ItemsGetPayload<T>>

    /**
     * Count the number of Items.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ItemsCountArgs} args - Arguments to filter Items to count.
     * @example
     * // Count the number of Items
     * const count = await prisma.items.count({
     *   where: {
     *     // ... the filter for the Items we want to count
     *   }
     * })
    **/
    count<T extends ItemsCountArgs>(
      args?: Subset<T, ItemsCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ItemsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Items.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ItemsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ItemsAggregateArgs>(args: Subset<T, ItemsAggregateArgs>): PrismaPromise<GetItemsAggregateType<T>>

    /**
     * Group by Items.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ItemsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ItemsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ItemsGroupByArgs['orderBy'] }
        : { orderBy?: ItemsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ItemsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetItemsGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Items.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ItemsClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    order_items<T extends Order_ItemsFindManyArgs= {}>(args?: Subset<T, Order_ItemsFindManyArgs>): PrismaPromise<Array<Order_ItemsGetPayload<T>>| Null>;

    item_reviews<T extends Item_ReviewsFindManyArgs= {}>(args?: Subset<T, Item_ReviewsFindManyArgs>): PrismaPromise<Array<Item_ReviewsGetPayload<T>>| Null>;

    category<T extends CategoryArgs= {}>(args?: Subset<T, CategoryArgs>): Prisma__CategoryClient<CategoryGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Items base type for findUnique actions
   */
  export type ItemsFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Items
     * 
    **/
    select?: ItemsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ItemsInclude | null
    /**
     * Filter, which Items to fetch.
     * 
    **/
    where: ItemsWhereUniqueInput
  }

  /**
   * Items: findUnique
   */
  export interface ItemsFindUniqueArgs extends ItemsFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Items base type for findFirst actions
   */
  export type ItemsFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Items
     * 
    **/
    select?: ItemsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ItemsInclude | null
    /**
     * Filter, which Items to fetch.
     * 
    **/
    where?: ItemsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Items to fetch.
     * 
    **/
    orderBy?: Enumerable<ItemsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Items.
     * 
    **/
    cursor?: ItemsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Items from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Items.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Items.
     * 
    **/
    distinct?: Enumerable<ItemsScalarFieldEnum>
  }

  /**
   * Items: findFirst
   */
  export interface ItemsFindFirstArgs extends ItemsFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Items findMany
   */
  export type ItemsFindManyArgs = {
    /**
     * Select specific fields to fetch from the Items
     * 
    **/
    select?: ItemsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ItemsInclude | null
    /**
     * Filter, which Items to fetch.
     * 
    **/
    where?: ItemsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Items to fetch.
     * 
    **/
    orderBy?: Enumerable<ItemsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Items.
     * 
    **/
    cursor?: ItemsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Items from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Items.
     * 
    **/
    skip?: number
    distinct?: Enumerable<ItemsScalarFieldEnum>
  }


  /**
   * Items create
   */
  export type ItemsCreateArgs = {
    /**
     * Select specific fields to fetch from the Items
     * 
    **/
    select?: ItemsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ItemsInclude | null
    /**
     * The data needed to create a Items.
     * 
    **/
    data: XOR<ItemsCreateInput, ItemsUncheckedCreateInput>
  }


  /**
   * Items createMany
   */
  export type ItemsCreateManyArgs = {
    /**
     * The data used to create many Items.
     * 
    **/
    data: Enumerable<ItemsCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Items update
   */
  export type ItemsUpdateArgs = {
    /**
     * Select specific fields to fetch from the Items
     * 
    **/
    select?: ItemsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ItemsInclude | null
    /**
     * The data needed to update a Items.
     * 
    **/
    data: XOR<ItemsUpdateInput, ItemsUncheckedUpdateInput>
    /**
     * Choose, which Items to update.
     * 
    **/
    where: ItemsWhereUniqueInput
  }


  /**
   * Items updateMany
   */
  export type ItemsUpdateManyArgs = {
    /**
     * The data used to update Items.
     * 
    **/
    data: XOR<ItemsUpdateManyMutationInput, ItemsUncheckedUpdateManyInput>
    /**
     * Filter which Items to update
     * 
    **/
    where?: ItemsWhereInput
  }


  /**
   * Items upsert
   */
  export type ItemsUpsertArgs = {
    /**
     * Select specific fields to fetch from the Items
     * 
    **/
    select?: ItemsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ItemsInclude | null
    /**
     * The filter to search for the Items to update in case it exists.
     * 
    **/
    where: ItemsWhereUniqueInput
    /**
     * In case the Items found by the `where` argument doesn't exist, create a new Items with this data.
     * 
    **/
    create: XOR<ItemsCreateInput, ItemsUncheckedCreateInput>
    /**
     * In case the Items was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<ItemsUpdateInput, ItemsUncheckedUpdateInput>
  }


  /**
   * Items delete
   */
  export type ItemsDeleteArgs = {
    /**
     * Select specific fields to fetch from the Items
     * 
    **/
    select?: ItemsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ItemsInclude | null
    /**
     * Filter which Items to delete.
     * 
    **/
    where: ItemsWhereUniqueInput
  }


  /**
   * Items deleteMany
   */
  export type ItemsDeleteManyArgs = {
    /**
     * Filter which Items to delete
     * 
    **/
    where?: ItemsWhereInput
  }


  /**
   * Items: findUniqueOrThrow
   */
  export type ItemsFindUniqueOrThrowArgs = ItemsFindUniqueArgsBase
      

  /**
   * Items: findFirstOrThrow
   */
  export type ItemsFindFirstOrThrowArgs = ItemsFindFirstArgsBase
      

  /**
   * Items without action
   */
  export type ItemsArgs = {
    /**
     * Select specific fields to fetch from the Items
     * 
    **/
    select?: ItemsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ItemsInclude | null
  }



  /**
   * Model Order_Items
   */


  export type AggregateOrder_Items = {
    _count: Order_ItemsCountAggregateOutputType | null
    _avg: Order_ItemsAvgAggregateOutputType | null
    _sum: Order_ItemsSumAggregateOutputType | null
    _min: Order_ItemsMinAggregateOutputType | null
    _max: Order_ItemsMaxAggregateOutputType | null
  }

  export type Order_ItemsAvgAggregateOutputType = {
    id: number | null
    orderId: number | null
    itemId: number | null
    quantity: number | null
  }

  export type Order_ItemsSumAggregateOutputType = {
    id: number | null
    orderId: number | null
    itemId: number | null
    quantity: number | null
  }

  export type Order_ItemsMinAggregateOutputType = {
    id: number | null
    orderId: number | null
    itemId: number | null
    quantity: number | null
  }

  export type Order_ItemsMaxAggregateOutputType = {
    id: number | null
    orderId: number | null
    itemId: number | null
    quantity: number | null
  }

  export type Order_ItemsCountAggregateOutputType = {
    id: number
    orderId: number
    itemId: number
    quantity: number
    _all: number
  }


  export type Order_ItemsAvgAggregateInputType = {
    id?: true
    orderId?: true
    itemId?: true
    quantity?: true
  }

  export type Order_ItemsSumAggregateInputType = {
    id?: true
    orderId?: true
    itemId?: true
    quantity?: true
  }

  export type Order_ItemsMinAggregateInputType = {
    id?: true
    orderId?: true
    itemId?: true
    quantity?: true
  }

  export type Order_ItemsMaxAggregateInputType = {
    id?: true
    orderId?: true
    itemId?: true
    quantity?: true
  }

  export type Order_ItemsCountAggregateInputType = {
    id?: true
    orderId?: true
    itemId?: true
    quantity?: true
    _all?: true
  }

  export type Order_ItemsAggregateArgs = {
    /**
     * Filter which Order_Items to aggregate.
     * 
    **/
    where?: Order_ItemsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Order_Items to fetch.
     * 
    **/
    orderBy?: Enumerable<Order_ItemsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: Order_ItemsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Order_Items from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Order_Items.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Order_Items
    **/
    _count?: true | Order_ItemsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Order_ItemsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Order_ItemsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Order_ItemsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Order_ItemsMaxAggregateInputType
  }

  export type GetOrder_ItemsAggregateType<T extends Order_ItemsAggregateArgs> = {
        [P in keyof T & keyof AggregateOrder_Items]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateOrder_Items[P]>
      : GetScalarType<T[P], AggregateOrder_Items[P]>
  }




  export type Order_ItemsGroupByArgs = {
    where?: Order_ItemsWhereInput
    orderBy?: Enumerable<Order_ItemsOrderByWithAggregationInput>
    by: Array<Order_ItemsScalarFieldEnum>
    having?: Order_ItemsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Order_ItemsCountAggregateInputType | true
    _avg?: Order_ItemsAvgAggregateInputType
    _sum?: Order_ItemsSumAggregateInputType
    _min?: Order_ItemsMinAggregateInputType
    _max?: Order_ItemsMaxAggregateInputType
  }


  export type Order_ItemsGroupByOutputType = {
    id: number
    orderId: number
    itemId: number
    quantity: number
    _count: Order_ItemsCountAggregateOutputType | null
    _avg: Order_ItemsAvgAggregateOutputType | null
    _sum: Order_ItemsSumAggregateOutputType | null
    _min: Order_ItemsMinAggregateOutputType | null
    _max: Order_ItemsMaxAggregateOutputType | null
  }

  type GetOrder_ItemsGroupByPayload<T extends Order_ItemsGroupByArgs> = PrismaPromise<
    Array<
      PickArray<Order_ItemsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Order_ItemsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Order_ItemsGroupByOutputType[P]>
            : GetScalarType<T[P], Order_ItemsGroupByOutputType[P]>
        }
      >
    >


  export type Order_ItemsSelect = {
    id?: boolean
    orderId?: boolean
    itemId?: boolean
    quantity?: boolean
    orders?: boolean | OrdersArgs
    items?: boolean | ItemsArgs
  }


  export type Order_ItemsInclude = {
    orders?: boolean | OrdersArgs
    items?: boolean | ItemsArgs
  } 

  export type Order_ItemsGetPayload<S extends boolean | null | undefined | Order_ItemsArgs, U = keyof S> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Order_Items :
    S extends undefined ? never :
    S extends { include: any } & (Order_ItemsArgs | Order_ItemsFindManyArgs)
    ? Order_Items  & {
    [P in TrueKeys<S['include']>]:
        P extends 'orders' ? OrdersGetPayload<Exclude<S['include'], undefined | null>[P]> | null :
        P extends 'items' ? ItemsGetPayload<Exclude<S['include'], undefined | null>[P]> | null :  never
  } 
    : S extends { select: any } & (Order_ItemsArgs | Order_ItemsFindManyArgs)
      ? {
    [P in TrueKeys<S['select']>]:
        P extends 'orders' ? OrdersGetPayload<Exclude<S['select'], undefined | null>[P]> | null :
        P extends 'items' ? ItemsGetPayload<Exclude<S['select'], undefined | null>[P]> | null :  P extends keyof Order_Items ? Order_Items[P] : never
  } 
      : Order_Items


  type Order_ItemsCountArgs = Merge<
    Omit<Order_ItemsFindManyArgs, 'select' | 'include'> & {
      select?: Order_ItemsCountAggregateInputType | true
    }
  >

  export interface Order_ItemsDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Order_Items that matches the filter.
     * @param {Order_ItemsFindUniqueArgs} args - Arguments to find a Order_Items
     * @example
     * // Get one Order_Items
     * const order_Items = await prisma.order_Items.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends Order_ItemsFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, Order_ItemsFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Order_Items'> extends True ? Prisma__Order_ItemsClient<Order_ItemsGetPayload<T>> : Prisma__Order_ItemsClient<Order_ItemsGetPayload<T> | null, null>

    /**
     * Find the first Order_Items that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Order_ItemsFindFirstArgs} args - Arguments to find a Order_Items
     * @example
     * // Get one Order_Items
     * const order_Items = await prisma.order_Items.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends Order_ItemsFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, Order_ItemsFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Order_Items'> extends True ? Prisma__Order_ItemsClient<Order_ItemsGetPayload<T>> : Prisma__Order_ItemsClient<Order_ItemsGetPayload<T> | null, null>

    /**
     * Find zero or more Order_Items that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Order_ItemsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Order_Items
     * const order_Items = await prisma.order_Items.findMany()
     * 
     * // Get first 10 Order_Items
     * const order_Items = await prisma.order_Items.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const order_ItemsWithIdOnly = await prisma.order_Items.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends Order_ItemsFindManyArgs>(
      args?: SelectSubset<T, Order_ItemsFindManyArgs>
    ): PrismaPromise<Array<Order_ItemsGetPayload<T>>>

    /**
     * Create a Order_Items.
     * @param {Order_ItemsCreateArgs} args - Arguments to create a Order_Items.
     * @example
     * // Create one Order_Items
     * const Order_Items = await prisma.order_Items.create({
     *   data: {
     *     // ... data to create a Order_Items
     *   }
     * })
     * 
    **/
    create<T extends Order_ItemsCreateArgs>(
      args: SelectSubset<T, Order_ItemsCreateArgs>
    ): Prisma__Order_ItemsClient<Order_ItemsGetPayload<T>>

    /**
     * Create many Order_Items.
     *     @param {Order_ItemsCreateManyArgs} args - Arguments to create many Order_Items.
     *     @example
     *     // Create many Order_Items
     *     const order_Items = await prisma.order_Items.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends Order_ItemsCreateManyArgs>(
      args?: SelectSubset<T, Order_ItemsCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Order_Items.
     * @param {Order_ItemsDeleteArgs} args - Arguments to delete one Order_Items.
     * @example
     * // Delete one Order_Items
     * const Order_Items = await prisma.order_Items.delete({
     *   where: {
     *     // ... filter to delete one Order_Items
     *   }
     * })
     * 
    **/
    delete<T extends Order_ItemsDeleteArgs>(
      args: SelectSubset<T, Order_ItemsDeleteArgs>
    ): Prisma__Order_ItemsClient<Order_ItemsGetPayload<T>>

    /**
     * Update one Order_Items.
     * @param {Order_ItemsUpdateArgs} args - Arguments to update one Order_Items.
     * @example
     * // Update one Order_Items
     * const order_Items = await prisma.order_Items.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends Order_ItemsUpdateArgs>(
      args: SelectSubset<T, Order_ItemsUpdateArgs>
    ): Prisma__Order_ItemsClient<Order_ItemsGetPayload<T>>

    /**
     * Delete zero or more Order_Items.
     * @param {Order_ItemsDeleteManyArgs} args - Arguments to filter Order_Items to delete.
     * @example
     * // Delete a few Order_Items
     * const { count } = await prisma.order_Items.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends Order_ItemsDeleteManyArgs>(
      args?: SelectSubset<T, Order_ItemsDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Order_Items.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Order_ItemsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Order_Items
     * const order_Items = await prisma.order_Items.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends Order_ItemsUpdateManyArgs>(
      args: SelectSubset<T, Order_ItemsUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Order_Items.
     * @param {Order_ItemsUpsertArgs} args - Arguments to update or create a Order_Items.
     * @example
     * // Update or create a Order_Items
     * const order_Items = await prisma.order_Items.upsert({
     *   create: {
     *     // ... data to create a Order_Items
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Order_Items we want to update
     *   }
     * })
    **/
    upsert<T extends Order_ItemsUpsertArgs>(
      args: SelectSubset<T, Order_ItemsUpsertArgs>
    ): Prisma__Order_ItemsClient<Order_ItemsGetPayload<T>>

    /**
     * Find one Order_Items that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {Order_ItemsFindUniqueOrThrowArgs} args - Arguments to find a Order_Items
     * @example
     * // Get one Order_Items
     * const order_Items = await prisma.order_Items.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends Order_ItemsFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, Order_ItemsFindUniqueOrThrowArgs>
    ): Prisma__Order_ItemsClient<Order_ItemsGetPayload<T>>

    /**
     * Find the first Order_Items that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Order_ItemsFindFirstOrThrowArgs} args - Arguments to find a Order_Items
     * @example
     * // Get one Order_Items
     * const order_Items = await prisma.order_Items.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends Order_ItemsFindFirstOrThrowArgs>(
      args?: SelectSubset<T, Order_ItemsFindFirstOrThrowArgs>
    ): Prisma__Order_ItemsClient<Order_ItemsGetPayload<T>>

    /**
     * Count the number of Order_Items.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Order_ItemsCountArgs} args - Arguments to filter Order_Items to count.
     * @example
     * // Count the number of Order_Items
     * const count = await prisma.order_Items.count({
     *   where: {
     *     // ... the filter for the Order_Items we want to count
     *   }
     * })
    **/
    count<T extends Order_ItemsCountArgs>(
      args?: Subset<T, Order_ItemsCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Order_ItemsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Order_Items.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Order_ItemsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Order_ItemsAggregateArgs>(args: Subset<T, Order_ItemsAggregateArgs>): PrismaPromise<GetOrder_ItemsAggregateType<T>>

    /**
     * Group by Order_Items.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Order_ItemsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Order_ItemsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Order_ItemsGroupByArgs['orderBy'] }
        : { orderBy?: Order_ItemsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Order_ItemsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetOrder_ItemsGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Order_Items.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__Order_ItemsClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    orders<T extends OrdersArgs= {}>(args?: Subset<T, OrdersArgs>): Prisma__OrdersClient<OrdersGetPayload<T> | Null>;

    items<T extends ItemsArgs= {}>(args?: Subset<T, ItemsArgs>): Prisma__ItemsClient<ItemsGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Order_Items base type for findUnique actions
   */
  export type Order_ItemsFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Order_Items
     * 
    **/
    select?: Order_ItemsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: Order_ItemsInclude | null
    /**
     * Filter, which Order_Items to fetch.
     * 
    **/
    where: Order_ItemsWhereUniqueInput
  }

  /**
   * Order_Items: findUnique
   */
  export interface Order_ItemsFindUniqueArgs extends Order_ItemsFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Order_Items base type for findFirst actions
   */
  export type Order_ItemsFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Order_Items
     * 
    **/
    select?: Order_ItemsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: Order_ItemsInclude | null
    /**
     * Filter, which Order_Items to fetch.
     * 
    **/
    where?: Order_ItemsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Order_Items to fetch.
     * 
    **/
    orderBy?: Enumerable<Order_ItemsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Order_Items.
     * 
    **/
    cursor?: Order_ItemsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Order_Items from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Order_Items.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Order_Items.
     * 
    **/
    distinct?: Enumerable<Order_ItemsScalarFieldEnum>
  }

  /**
   * Order_Items: findFirst
   */
  export interface Order_ItemsFindFirstArgs extends Order_ItemsFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Order_Items findMany
   */
  export type Order_ItemsFindManyArgs = {
    /**
     * Select specific fields to fetch from the Order_Items
     * 
    **/
    select?: Order_ItemsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: Order_ItemsInclude | null
    /**
     * Filter, which Order_Items to fetch.
     * 
    **/
    where?: Order_ItemsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Order_Items to fetch.
     * 
    **/
    orderBy?: Enumerable<Order_ItemsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Order_Items.
     * 
    **/
    cursor?: Order_ItemsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Order_Items from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Order_Items.
     * 
    **/
    skip?: number
    distinct?: Enumerable<Order_ItemsScalarFieldEnum>
  }


  /**
   * Order_Items create
   */
  export type Order_ItemsCreateArgs = {
    /**
     * Select specific fields to fetch from the Order_Items
     * 
    **/
    select?: Order_ItemsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: Order_ItemsInclude | null
    /**
     * The data needed to create a Order_Items.
     * 
    **/
    data: XOR<Order_ItemsCreateInput, Order_ItemsUncheckedCreateInput>
  }


  /**
   * Order_Items createMany
   */
  export type Order_ItemsCreateManyArgs = {
    /**
     * The data used to create many Order_Items.
     * 
    **/
    data: Enumerable<Order_ItemsCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Order_Items update
   */
  export type Order_ItemsUpdateArgs = {
    /**
     * Select specific fields to fetch from the Order_Items
     * 
    **/
    select?: Order_ItemsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: Order_ItemsInclude | null
    /**
     * The data needed to update a Order_Items.
     * 
    **/
    data: XOR<Order_ItemsUpdateInput, Order_ItemsUncheckedUpdateInput>
    /**
     * Choose, which Order_Items to update.
     * 
    **/
    where: Order_ItemsWhereUniqueInput
  }


  /**
   * Order_Items updateMany
   */
  export type Order_ItemsUpdateManyArgs = {
    /**
     * The data used to update Order_Items.
     * 
    **/
    data: XOR<Order_ItemsUpdateManyMutationInput, Order_ItemsUncheckedUpdateManyInput>
    /**
     * Filter which Order_Items to update
     * 
    **/
    where?: Order_ItemsWhereInput
  }


  /**
   * Order_Items upsert
   */
  export type Order_ItemsUpsertArgs = {
    /**
     * Select specific fields to fetch from the Order_Items
     * 
    **/
    select?: Order_ItemsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: Order_ItemsInclude | null
    /**
     * The filter to search for the Order_Items to update in case it exists.
     * 
    **/
    where: Order_ItemsWhereUniqueInput
    /**
     * In case the Order_Items found by the `where` argument doesn't exist, create a new Order_Items with this data.
     * 
    **/
    create: XOR<Order_ItemsCreateInput, Order_ItemsUncheckedCreateInput>
    /**
     * In case the Order_Items was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<Order_ItemsUpdateInput, Order_ItemsUncheckedUpdateInput>
  }


  /**
   * Order_Items delete
   */
  export type Order_ItemsDeleteArgs = {
    /**
     * Select specific fields to fetch from the Order_Items
     * 
    **/
    select?: Order_ItemsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: Order_ItemsInclude | null
    /**
     * Filter which Order_Items to delete.
     * 
    **/
    where: Order_ItemsWhereUniqueInput
  }


  /**
   * Order_Items deleteMany
   */
  export type Order_ItemsDeleteManyArgs = {
    /**
     * Filter which Order_Items to delete
     * 
    **/
    where?: Order_ItemsWhereInput
  }


  /**
   * Order_Items: findUniqueOrThrow
   */
  export type Order_ItemsFindUniqueOrThrowArgs = Order_ItemsFindUniqueArgsBase
      

  /**
   * Order_Items: findFirstOrThrow
   */
  export type Order_ItemsFindFirstOrThrowArgs = Order_ItemsFindFirstArgsBase
      

  /**
   * Order_Items without action
   */
  export type Order_ItemsArgs = {
    /**
     * Select specific fields to fetch from the Order_Items
     * 
    **/
    select?: Order_ItemsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: Order_ItemsInclude | null
  }



  /**
   * Model Reviews
   */


  export type AggregateReviews = {
    _count: ReviewsCountAggregateOutputType | null
    _avg: ReviewsAvgAggregateOutputType | null
    _sum: ReviewsSumAggregateOutputType | null
    _min: ReviewsMinAggregateOutputType | null
    _max: ReviewsMaxAggregateOutputType | null
  }

  export type ReviewsAvgAggregateOutputType = {
    id: number | null
    stars: number | null
    userId: number | null
  }

  export type ReviewsSumAggregateOutputType = {
    id: number | null
    stars: number | null
    userId: number | null
  }

  export type ReviewsMinAggregateOutputType = {
    id: number | null
    title: string | null
    stars: number | null
    content: string | null
    userId: number | null
  }

  export type ReviewsMaxAggregateOutputType = {
    id: number | null
    title: string | null
    stars: number | null
    content: string | null
    userId: number | null
  }

  export type ReviewsCountAggregateOutputType = {
    id: number
    title: number
    stars: number
    content: number
    userId: number
    _all: number
  }


  export type ReviewsAvgAggregateInputType = {
    id?: true
    stars?: true
    userId?: true
  }

  export type ReviewsSumAggregateInputType = {
    id?: true
    stars?: true
    userId?: true
  }

  export type ReviewsMinAggregateInputType = {
    id?: true
    title?: true
    stars?: true
    content?: true
    userId?: true
  }

  export type ReviewsMaxAggregateInputType = {
    id?: true
    title?: true
    stars?: true
    content?: true
    userId?: true
  }

  export type ReviewsCountAggregateInputType = {
    id?: true
    title?: true
    stars?: true
    content?: true
    userId?: true
    _all?: true
  }

  export type ReviewsAggregateArgs = {
    /**
     * Filter which Reviews to aggregate.
     * 
    **/
    where?: ReviewsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Reviews to fetch.
     * 
    **/
    orderBy?: Enumerable<ReviewsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: ReviewsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Reviews from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Reviews.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Reviews
    **/
    _count?: true | ReviewsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ReviewsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ReviewsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ReviewsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ReviewsMaxAggregateInputType
  }

  export type GetReviewsAggregateType<T extends ReviewsAggregateArgs> = {
        [P in keyof T & keyof AggregateReviews]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateReviews[P]>
      : GetScalarType<T[P], AggregateReviews[P]>
  }




  export type ReviewsGroupByArgs = {
    where?: ReviewsWhereInput
    orderBy?: Enumerable<ReviewsOrderByWithAggregationInput>
    by: Array<ReviewsScalarFieldEnum>
    having?: ReviewsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ReviewsCountAggregateInputType | true
    _avg?: ReviewsAvgAggregateInputType
    _sum?: ReviewsSumAggregateInputType
    _min?: ReviewsMinAggregateInputType
    _max?: ReviewsMaxAggregateInputType
  }


  export type ReviewsGroupByOutputType = {
    id: number
    title: string
    stars: number
    content: string
    userId: number
    _count: ReviewsCountAggregateOutputType | null
    _avg: ReviewsAvgAggregateOutputType | null
    _sum: ReviewsSumAggregateOutputType | null
    _min: ReviewsMinAggregateOutputType | null
    _max: ReviewsMaxAggregateOutputType | null
  }

  type GetReviewsGroupByPayload<T extends ReviewsGroupByArgs> = PrismaPromise<
    Array<
      PickArray<ReviewsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ReviewsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ReviewsGroupByOutputType[P]>
            : GetScalarType<T[P], ReviewsGroupByOutputType[P]>
        }
      >
    >


  export type ReviewsSelect = {
    id?: boolean
    title?: boolean
    stars?: boolean
    content?: boolean
    userId?: boolean
    item_reviews?: boolean | Item_ReviewsFindManyArgs
    users?: boolean | UsersArgs
    _count?: boolean | ReviewsCountOutputTypeArgs
  }


  export type ReviewsInclude = {
    item_reviews?: boolean | Item_ReviewsFindManyArgs
    users?: boolean | UsersArgs
    _count?: boolean | ReviewsCountOutputTypeArgs
  } 

  export type ReviewsGetPayload<S extends boolean | null | undefined | ReviewsArgs, U = keyof S> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Reviews :
    S extends undefined ? never :
    S extends { include: any } & (ReviewsArgs | ReviewsFindManyArgs)
    ? Reviews  & {
    [P in TrueKeys<S['include']>]:
        P extends 'item_reviews' ? Array < Item_ReviewsGetPayload<Exclude<S['include'], undefined | null>[P]>>  :
        P extends 'users' ? UsersGetPayload<Exclude<S['include'], undefined | null>[P]> | null :
        P extends '_count' ? ReviewsCountOutputTypeGetPayload<Exclude<S['include'], undefined | null>[P]> :  never
  } 
    : S extends { select: any } & (ReviewsArgs | ReviewsFindManyArgs)
      ? {
    [P in TrueKeys<S['select']>]:
        P extends 'item_reviews' ? Array < Item_ReviewsGetPayload<Exclude<S['select'], undefined | null>[P]>>  :
        P extends 'users' ? UsersGetPayload<Exclude<S['select'], undefined | null>[P]> | null :
        P extends '_count' ? ReviewsCountOutputTypeGetPayload<Exclude<S['select'], undefined | null>[P]> :  P extends keyof Reviews ? Reviews[P] : never
  } 
      : Reviews


  type ReviewsCountArgs = Merge<
    Omit<ReviewsFindManyArgs, 'select' | 'include'> & {
      select?: ReviewsCountAggregateInputType | true
    }
  >

  export interface ReviewsDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Reviews that matches the filter.
     * @param {ReviewsFindUniqueArgs} args - Arguments to find a Reviews
     * @example
     * // Get one Reviews
     * const reviews = await prisma.reviews.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ReviewsFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, ReviewsFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Reviews'> extends True ? Prisma__ReviewsClient<ReviewsGetPayload<T>> : Prisma__ReviewsClient<ReviewsGetPayload<T> | null, null>

    /**
     * Find the first Reviews that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReviewsFindFirstArgs} args - Arguments to find a Reviews
     * @example
     * // Get one Reviews
     * const reviews = await prisma.reviews.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ReviewsFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, ReviewsFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Reviews'> extends True ? Prisma__ReviewsClient<ReviewsGetPayload<T>> : Prisma__ReviewsClient<ReviewsGetPayload<T> | null, null>

    /**
     * Find zero or more Reviews that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReviewsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Reviews
     * const reviews = await prisma.reviews.findMany()
     * 
     * // Get first 10 Reviews
     * const reviews = await prisma.reviews.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const reviewsWithIdOnly = await prisma.reviews.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ReviewsFindManyArgs>(
      args?: SelectSubset<T, ReviewsFindManyArgs>
    ): PrismaPromise<Array<ReviewsGetPayload<T>>>

    /**
     * Create a Reviews.
     * @param {ReviewsCreateArgs} args - Arguments to create a Reviews.
     * @example
     * // Create one Reviews
     * const Reviews = await prisma.reviews.create({
     *   data: {
     *     // ... data to create a Reviews
     *   }
     * })
     * 
    **/
    create<T extends ReviewsCreateArgs>(
      args: SelectSubset<T, ReviewsCreateArgs>
    ): Prisma__ReviewsClient<ReviewsGetPayload<T>>

    /**
     * Create many Reviews.
     *     @param {ReviewsCreateManyArgs} args - Arguments to create many Reviews.
     *     @example
     *     // Create many Reviews
     *     const reviews = await prisma.reviews.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ReviewsCreateManyArgs>(
      args?: SelectSubset<T, ReviewsCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Reviews.
     * @param {ReviewsDeleteArgs} args - Arguments to delete one Reviews.
     * @example
     * // Delete one Reviews
     * const Reviews = await prisma.reviews.delete({
     *   where: {
     *     // ... filter to delete one Reviews
     *   }
     * })
     * 
    **/
    delete<T extends ReviewsDeleteArgs>(
      args: SelectSubset<T, ReviewsDeleteArgs>
    ): Prisma__ReviewsClient<ReviewsGetPayload<T>>

    /**
     * Update one Reviews.
     * @param {ReviewsUpdateArgs} args - Arguments to update one Reviews.
     * @example
     * // Update one Reviews
     * const reviews = await prisma.reviews.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ReviewsUpdateArgs>(
      args: SelectSubset<T, ReviewsUpdateArgs>
    ): Prisma__ReviewsClient<ReviewsGetPayload<T>>

    /**
     * Delete zero or more Reviews.
     * @param {ReviewsDeleteManyArgs} args - Arguments to filter Reviews to delete.
     * @example
     * // Delete a few Reviews
     * const { count } = await prisma.reviews.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ReviewsDeleteManyArgs>(
      args?: SelectSubset<T, ReviewsDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Reviews.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReviewsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Reviews
     * const reviews = await prisma.reviews.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ReviewsUpdateManyArgs>(
      args: SelectSubset<T, ReviewsUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Reviews.
     * @param {ReviewsUpsertArgs} args - Arguments to update or create a Reviews.
     * @example
     * // Update or create a Reviews
     * const reviews = await prisma.reviews.upsert({
     *   create: {
     *     // ... data to create a Reviews
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Reviews we want to update
     *   }
     * })
    **/
    upsert<T extends ReviewsUpsertArgs>(
      args: SelectSubset<T, ReviewsUpsertArgs>
    ): Prisma__ReviewsClient<ReviewsGetPayload<T>>

    /**
     * Find one Reviews that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {ReviewsFindUniqueOrThrowArgs} args - Arguments to find a Reviews
     * @example
     * // Get one Reviews
     * const reviews = await prisma.reviews.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ReviewsFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, ReviewsFindUniqueOrThrowArgs>
    ): Prisma__ReviewsClient<ReviewsGetPayload<T>>

    /**
     * Find the first Reviews that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReviewsFindFirstOrThrowArgs} args - Arguments to find a Reviews
     * @example
     * // Get one Reviews
     * const reviews = await prisma.reviews.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ReviewsFindFirstOrThrowArgs>(
      args?: SelectSubset<T, ReviewsFindFirstOrThrowArgs>
    ): Prisma__ReviewsClient<ReviewsGetPayload<T>>

    /**
     * Count the number of Reviews.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReviewsCountArgs} args - Arguments to filter Reviews to count.
     * @example
     * // Count the number of Reviews
     * const count = await prisma.reviews.count({
     *   where: {
     *     // ... the filter for the Reviews we want to count
     *   }
     * })
    **/
    count<T extends ReviewsCountArgs>(
      args?: Subset<T, ReviewsCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ReviewsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Reviews.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReviewsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ReviewsAggregateArgs>(args: Subset<T, ReviewsAggregateArgs>): PrismaPromise<GetReviewsAggregateType<T>>

    /**
     * Group by Reviews.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReviewsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ReviewsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ReviewsGroupByArgs['orderBy'] }
        : { orderBy?: ReviewsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ReviewsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetReviewsGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Reviews.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ReviewsClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    item_reviews<T extends Item_ReviewsFindManyArgs= {}>(args?: Subset<T, Item_ReviewsFindManyArgs>): PrismaPromise<Array<Item_ReviewsGetPayload<T>>| Null>;

    users<T extends UsersArgs= {}>(args?: Subset<T, UsersArgs>): Prisma__UsersClient<UsersGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Reviews base type for findUnique actions
   */
  export type ReviewsFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Reviews
     * 
    **/
    select?: ReviewsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ReviewsInclude | null
    /**
     * Filter, which Reviews to fetch.
     * 
    **/
    where: ReviewsWhereUniqueInput
  }

  /**
   * Reviews: findUnique
   */
  export interface ReviewsFindUniqueArgs extends ReviewsFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Reviews base type for findFirst actions
   */
  export type ReviewsFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Reviews
     * 
    **/
    select?: ReviewsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ReviewsInclude | null
    /**
     * Filter, which Reviews to fetch.
     * 
    **/
    where?: ReviewsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Reviews to fetch.
     * 
    **/
    orderBy?: Enumerable<ReviewsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Reviews.
     * 
    **/
    cursor?: ReviewsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Reviews from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Reviews.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Reviews.
     * 
    **/
    distinct?: Enumerable<ReviewsScalarFieldEnum>
  }

  /**
   * Reviews: findFirst
   */
  export interface ReviewsFindFirstArgs extends ReviewsFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Reviews findMany
   */
  export type ReviewsFindManyArgs = {
    /**
     * Select specific fields to fetch from the Reviews
     * 
    **/
    select?: ReviewsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ReviewsInclude | null
    /**
     * Filter, which Reviews to fetch.
     * 
    **/
    where?: ReviewsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Reviews to fetch.
     * 
    **/
    orderBy?: Enumerable<ReviewsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Reviews.
     * 
    **/
    cursor?: ReviewsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Reviews from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Reviews.
     * 
    **/
    skip?: number
    distinct?: Enumerable<ReviewsScalarFieldEnum>
  }


  /**
   * Reviews create
   */
  export type ReviewsCreateArgs = {
    /**
     * Select specific fields to fetch from the Reviews
     * 
    **/
    select?: ReviewsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ReviewsInclude | null
    /**
     * The data needed to create a Reviews.
     * 
    **/
    data: XOR<ReviewsCreateInput, ReviewsUncheckedCreateInput>
  }


  /**
   * Reviews createMany
   */
  export type ReviewsCreateManyArgs = {
    /**
     * The data used to create many Reviews.
     * 
    **/
    data: Enumerable<ReviewsCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Reviews update
   */
  export type ReviewsUpdateArgs = {
    /**
     * Select specific fields to fetch from the Reviews
     * 
    **/
    select?: ReviewsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ReviewsInclude | null
    /**
     * The data needed to update a Reviews.
     * 
    **/
    data: XOR<ReviewsUpdateInput, ReviewsUncheckedUpdateInput>
    /**
     * Choose, which Reviews to update.
     * 
    **/
    where: ReviewsWhereUniqueInput
  }


  /**
   * Reviews updateMany
   */
  export type ReviewsUpdateManyArgs = {
    /**
     * The data used to update Reviews.
     * 
    **/
    data: XOR<ReviewsUpdateManyMutationInput, ReviewsUncheckedUpdateManyInput>
    /**
     * Filter which Reviews to update
     * 
    **/
    where?: ReviewsWhereInput
  }


  /**
   * Reviews upsert
   */
  export type ReviewsUpsertArgs = {
    /**
     * Select specific fields to fetch from the Reviews
     * 
    **/
    select?: ReviewsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ReviewsInclude | null
    /**
     * The filter to search for the Reviews to update in case it exists.
     * 
    **/
    where: ReviewsWhereUniqueInput
    /**
     * In case the Reviews found by the `where` argument doesn't exist, create a new Reviews with this data.
     * 
    **/
    create: XOR<ReviewsCreateInput, ReviewsUncheckedCreateInput>
    /**
     * In case the Reviews was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<ReviewsUpdateInput, ReviewsUncheckedUpdateInput>
  }


  /**
   * Reviews delete
   */
  export type ReviewsDeleteArgs = {
    /**
     * Select specific fields to fetch from the Reviews
     * 
    **/
    select?: ReviewsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ReviewsInclude | null
    /**
     * Filter which Reviews to delete.
     * 
    **/
    where: ReviewsWhereUniqueInput
  }


  /**
   * Reviews deleteMany
   */
  export type ReviewsDeleteManyArgs = {
    /**
     * Filter which Reviews to delete
     * 
    **/
    where?: ReviewsWhereInput
  }


  /**
   * Reviews: findUniqueOrThrow
   */
  export type ReviewsFindUniqueOrThrowArgs = ReviewsFindUniqueArgsBase
      

  /**
   * Reviews: findFirstOrThrow
   */
  export type ReviewsFindFirstOrThrowArgs = ReviewsFindFirstArgsBase
      

  /**
   * Reviews without action
   */
  export type ReviewsArgs = {
    /**
     * Select specific fields to fetch from the Reviews
     * 
    **/
    select?: ReviewsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ReviewsInclude | null
  }



  /**
   * Model Item_Reviews
   */


  export type AggregateItem_Reviews = {
    _count: Item_ReviewsCountAggregateOutputType | null
    _avg: Item_ReviewsAvgAggregateOutputType | null
    _sum: Item_ReviewsSumAggregateOutputType | null
    _min: Item_ReviewsMinAggregateOutputType | null
    _max: Item_ReviewsMaxAggregateOutputType | null
  }

  export type Item_ReviewsAvgAggregateOutputType = {
    id: number | null
    itemId: number | null
    reviewId: number | null
  }

  export type Item_ReviewsSumAggregateOutputType = {
    id: number | null
    itemId: number | null
    reviewId: number | null
  }

  export type Item_ReviewsMinAggregateOutputType = {
    id: number | null
    itemId: number | null
    reviewId: number | null
  }

  export type Item_ReviewsMaxAggregateOutputType = {
    id: number | null
    itemId: number | null
    reviewId: number | null
  }

  export type Item_ReviewsCountAggregateOutputType = {
    id: number
    itemId: number
    reviewId: number
    _all: number
  }


  export type Item_ReviewsAvgAggregateInputType = {
    id?: true
    itemId?: true
    reviewId?: true
  }

  export type Item_ReviewsSumAggregateInputType = {
    id?: true
    itemId?: true
    reviewId?: true
  }

  export type Item_ReviewsMinAggregateInputType = {
    id?: true
    itemId?: true
    reviewId?: true
  }

  export type Item_ReviewsMaxAggregateInputType = {
    id?: true
    itemId?: true
    reviewId?: true
  }

  export type Item_ReviewsCountAggregateInputType = {
    id?: true
    itemId?: true
    reviewId?: true
    _all?: true
  }

  export type Item_ReviewsAggregateArgs = {
    /**
     * Filter which Item_Reviews to aggregate.
     * 
    **/
    where?: Item_ReviewsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Item_Reviews to fetch.
     * 
    **/
    orderBy?: Enumerable<Item_ReviewsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: Item_ReviewsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Item_Reviews from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Item_Reviews.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Item_Reviews
    **/
    _count?: true | Item_ReviewsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Item_ReviewsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Item_ReviewsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Item_ReviewsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Item_ReviewsMaxAggregateInputType
  }

  export type GetItem_ReviewsAggregateType<T extends Item_ReviewsAggregateArgs> = {
        [P in keyof T & keyof AggregateItem_Reviews]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateItem_Reviews[P]>
      : GetScalarType<T[P], AggregateItem_Reviews[P]>
  }




  export type Item_ReviewsGroupByArgs = {
    where?: Item_ReviewsWhereInput
    orderBy?: Enumerable<Item_ReviewsOrderByWithAggregationInput>
    by: Array<Item_ReviewsScalarFieldEnum>
    having?: Item_ReviewsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Item_ReviewsCountAggregateInputType | true
    _avg?: Item_ReviewsAvgAggregateInputType
    _sum?: Item_ReviewsSumAggregateInputType
    _min?: Item_ReviewsMinAggregateInputType
    _max?: Item_ReviewsMaxAggregateInputType
  }


  export type Item_ReviewsGroupByOutputType = {
    id: number
    itemId: number
    reviewId: number
    _count: Item_ReviewsCountAggregateOutputType | null
    _avg: Item_ReviewsAvgAggregateOutputType | null
    _sum: Item_ReviewsSumAggregateOutputType | null
    _min: Item_ReviewsMinAggregateOutputType | null
    _max: Item_ReviewsMaxAggregateOutputType | null
  }

  type GetItem_ReviewsGroupByPayload<T extends Item_ReviewsGroupByArgs> = PrismaPromise<
    Array<
      PickArray<Item_ReviewsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Item_ReviewsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Item_ReviewsGroupByOutputType[P]>
            : GetScalarType<T[P], Item_ReviewsGroupByOutputType[P]>
        }
      >
    >


  export type Item_ReviewsSelect = {
    id?: boolean
    itemId?: boolean
    reviewId?: boolean
    items?: boolean | ItemsArgs
    reviews?: boolean | ReviewsArgs
  }


  export type Item_ReviewsInclude = {
    items?: boolean | ItemsArgs
    reviews?: boolean | ReviewsArgs
  } 

  export type Item_ReviewsGetPayload<S extends boolean | null | undefined | Item_ReviewsArgs, U = keyof S> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Item_Reviews :
    S extends undefined ? never :
    S extends { include: any } & (Item_ReviewsArgs | Item_ReviewsFindManyArgs)
    ? Item_Reviews  & {
    [P in TrueKeys<S['include']>]:
        P extends 'items' ? ItemsGetPayload<Exclude<S['include'], undefined | null>[P]> | null :
        P extends 'reviews' ? ReviewsGetPayload<Exclude<S['include'], undefined | null>[P]> | null :  never
  } 
    : S extends { select: any } & (Item_ReviewsArgs | Item_ReviewsFindManyArgs)
      ? {
    [P in TrueKeys<S['select']>]:
        P extends 'items' ? ItemsGetPayload<Exclude<S['select'], undefined | null>[P]> | null :
        P extends 'reviews' ? ReviewsGetPayload<Exclude<S['select'], undefined | null>[P]> | null :  P extends keyof Item_Reviews ? Item_Reviews[P] : never
  } 
      : Item_Reviews


  type Item_ReviewsCountArgs = Merge<
    Omit<Item_ReviewsFindManyArgs, 'select' | 'include'> & {
      select?: Item_ReviewsCountAggregateInputType | true
    }
  >

  export interface Item_ReviewsDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Item_Reviews that matches the filter.
     * @param {Item_ReviewsFindUniqueArgs} args - Arguments to find a Item_Reviews
     * @example
     * // Get one Item_Reviews
     * const item_Reviews = await prisma.item_Reviews.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends Item_ReviewsFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, Item_ReviewsFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Item_Reviews'> extends True ? Prisma__Item_ReviewsClient<Item_ReviewsGetPayload<T>> : Prisma__Item_ReviewsClient<Item_ReviewsGetPayload<T> | null, null>

    /**
     * Find the first Item_Reviews that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Item_ReviewsFindFirstArgs} args - Arguments to find a Item_Reviews
     * @example
     * // Get one Item_Reviews
     * const item_Reviews = await prisma.item_Reviews.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends Item_ReviewsFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, Item_ReviewsFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Item_Reviews'> extends True ? Prisma__Item_ReviewsClient<Item_ReviewsGetPayload<T>> : Prisma__Item_ReviewsClient<Item_ReviewsGetPayload<T> | null, null>

    /**
     * Find zero or more Item_Reviews that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Item_ReviewsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Item_Reviews
     * const item_Reviews = await prisma.item_Reviews.findMany()
     * 
     * // Get first 10 Item_Reviews
     * const item_Reviews = await prisma.item_Reviews.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const item_ReviewsWithIdOnly = await prisma.item_Reviews.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends Item_ReviewsFindManyArgs>(
      args?: SelectSubset<T, Item_ReviewsFindManyArgs>
    ): PrismaPromise<Array<Item_ReviewsGetPayload<T>>>

    /**
     * Create a Item_Reviews.
     * @param {Item_ReviewsCreateArgs} args - Arguments to create a Item_Reviews.
     * @example
     * // Create one Item_Reviews
     * const Item_Reviews = await prisma.item_Reviews.create({
     *   data: {
     *     // ... data to create a Item_Reviews
     *   }
     * })
     * 
    **/
    create<T extends Item_ReviewsCreateArgs>(
      args: SelectSubset<T, Item_ReviewsCreateArgs>
    ): Prisma__Item_ReviewsClient<Item_ReviewsGetPayload<T>>

    /**
     * Create many Item_Reviews.
     *     @param {Item_ReviewsCreateManyArgs} args - Arguments to create many Item_Reviews.
     *     @example
     *     // Create many Item_Reviews
     *     const item_Reviews = await prisma.item_Reviews.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends Item_ReviewsCreateManyArgs>(
      args?: SelectSubset<T, Item_ReviewsCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Item_Reviews.
     * @param {Item_ReviewsDeleteArgs} args - Arguments to delete one Item_Reviews.
     * @example
     * // Delete one Item_Reviews
     * const Item_Reviews = await prisma.item_Reviews.delete({
     *   where: {
     *     // ... filter to delete one Item_Reviews
     *   }
     * })
     * 
    **/
    delete<T extends Item_ReviewsDeleteArgs>(
      args: SelectSubset<T, Item_ReviewsDeleteArgs>
    ): Prisma__Item_ReviewsClient<Item_ReviewsGetPayload<T>>

    /**
     * Update one Item_Reviews.
     * @param {Item_ReviewsUpdateArgs} args - Arguments to update one Item_Reviews.
     * @example
     * // Update one Item_Reviews
     * const item_Reviews = await prisma.item_Reviews.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends Item_ReviewsUpdateArgs>(
      args: SelectSubset<T, Item_ReviewsUpdateArgs>
    ): Prisma__Item_ReviewsClient<Item_ReviewsGetPayload<T>>

    /**
     * Delete zero or more Item_Reviews.
     * @param {Item_ReviewsDeleteManyArgs} args - Arguments to filter Item_Reviews to delete.
     * @example
     * // Delete a few Item_Reviews
     * const { count } = await prisma.item_Reviews.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends Item_ReviewsDeleteManyArgs>(
      args?: SelectSubset<T, Item_ReviewsDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Item_Reviews.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Item_ReviewsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Item_Reviews
     * const item_Reviews = await prisma.item_Reviews.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends Item_ReviewsUpdateManyArgs>(
      args: SelectSubset<T, Item_ReviewsUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Item_Reviews.
     * @param {Item_ReviewsUpsertArgs} args - Arguments to update or create a Item_Reviews.
     * @example
     * // Update or create a Item_Reviews
     * const item_Reviews = await prisma.item_Reviews.upsert({
     *   create: {
     *     // ... data to create a Item_Reviews
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Item_Reviews we want to update
     *   }
     * })
    **/
    upsert<T extends Item_ReviewsUpsertArgs>(
      args: SelectSubset<T, Item_ReviewsUpsertArgs>
    ): Prisma__Item_ReviewsClient<Item_ReviewsGetPayload<T>>

    /**
     * Find one Item_Reviews that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {Item_ReviewsFindUniqueOrThrowArgs} args - Arguments to find a Item_Reviews
     * @example
     * // Get one Item_Reviews
     * const item_Reviews = await prisma.item_Reviews.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends Item_ReviewsFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, Item_ReviewsFindUniqueOrThrowArgs>
    ): Prisma__Item_ReviewsClient<Item_ReviewsGetPayload<T>>

    /**
     * Find the first Item_Reviews that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Item_ReviewsFindFirstOrThrowArgs} args - Arguments to find a Item_Reviews
     * @example
     * // Get one Item_Reviews
     * const item_Reviews = await prisma.item_Reviews.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends Item_ReviewsFindFirstOrThrowArgs>(
      args?: SelectSubset<T, Item_ReviewsFindFirstOrThrowArgs>
    ): Prisma__Item_ReviewsClient<Item_ReviewsGetPayload<T>>

    /**
     * Count the number of Item_Reviews.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Item_ReviewsCountArgs} args - Arguments to filter Item_Reviews to count.
     * @example
     * // Count the number of Item_Reviews
     * const count = await prisma.item_Reviews.count({
     *   where: {
     *     // ... the filter for the Item_Reviews we want to count
     *   }
     * })
    **/
    count<T extends Item_ReviewsCountArgs>(
      args?: Subset<T, Item_ReviewsCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Item_ReviewsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Item_Reviews.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Item_ReviewsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Item_ReviewsAggregateArgs>(args: Subset<T, Item_ReviewsAggregateArgs>): PrismaPromise<GetItem_ReviewsAggregateType<T>>

    /**
     * Group by Item_Reviews.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Item_ReviewsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Item_ReviewsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Item_ReviewsGroupByArgs['orderBy'] }
        : { orderBy?: Item_ReviewsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Item_ReviewsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetItem_ReviewsGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Item_Reviews.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__Item_ReviewsClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    items<T extends ItemsArgs= {}>(args?: Subset<T, ItemsArgs>): Prisma__ItemsClient<ItemsGetPayload<T> | Null>;

    reviews<T extends ReviewsArgs= {}>(args?: Subset<T, ReviewsArgs>): Prisma__ReviewsClient<ReviewsGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Item_Reviews base type for findUnique actions
   */
  export type Item_ReviewsFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Item_Reviews
     * 
    **/
    select?: Item_ReviewsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: Item_ReviewsInclude | null
    /**
     * Filter, which Item_Reviews to fetch.
     * 
    **/
    where: Item_ReviewsWhereUniqueInput
  }

  /**
   * Item_Reviews: findUnique
   */
  export interface Item_ReviewsFindUniqueArgs extends Item_ReviewsFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Item_Reviews base type for findFirst actions
   */
  export type Item_ReviewsFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Item_Reviews
     * 
    **/
    select?: Item_ReviewsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: Item_ReviewsInclude | null
    /**
     * Filter, which Item_Reviews to fetch.
     * 
    **/
    where?: Item_ReviewsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Item_Reviews to fetch.
     * 
    **/
    orderBy?: Enumerable<Item_ReviewsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Item_Reviews.
     * 
    **/
    cursor?: Item_ReviewsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Item_Reviews from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Item_Reviews.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Item_Reviews.
     * 
    **/
    distinct?: Enumerable<Item_ReviewsScalarFieldEnum>
  }

  /**
   * Item_Reviews: findFirst
   */
  export interface Item_ReviewsFindFirstArgs extends Item_ReviewsFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Item_Reviews findMany
   */
  export type Item_ReviewsFindManyArgs = {
    /**
     * Select specific fields to fetch from the Item_Reviews
     * 
    **/
    select?: Item_ReviewsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: Item_ReviewsInclude | null
    /**
     * Filter, which Item_Reviews to fetch.
     * 
    **/
    where?: Item_ReviewsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Item_Reviews to fetch.
     * 
    **/
    orderBy?: Enumerable<Item_ReviewsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Item_Reviews.
     * 
    **/
    cursor?: Item_ReviewsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Item_Reviews from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Item_Reviews.
     * 
    **/
    skip?: number
    distinct?: Enumerable<Item_ReviewsScalarFieldEnum>
  }


  /**
   * Item_Reviews create
   */
  export type Item_ReviewsCreateArgs = {
    /**
     * Select specific fields to fetch from the Item_Reviews
     * 
    **/
    select?: Item_ReviewsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: Item_ReviewsInclude | null
    /**
     * The data needed to create a Item_Reviews.
     * 
    **/
    data: XOR<Item_ReviewsCreateInput, Item_ReviewsUncheckedCreateInput>
  }


  /**
   * Item_Reviews createMany
   */
  export type Item_ReviewsCreateManyArgs = {
    /**
     * The data used to create many Item_Reviews.
     * 
    **/
    data: Enumerable<Item_ReviewsCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Item_Reviews update
   */
  export type Item_ReviewsUpdateArgs = {
    /**
     * Select specific fields to fetch from the Item_Reviews
     * 
    **/
    select?: Item_ReviewsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: Item_ReviewsInclude | null
    /**
     * The data needed to update a Item_Reviews.
     * 
    **/
    data: XOR<Item_ReviewsUpdateInput, Item_ReviewsUncheckedUpdateInput>
    /**
     * Choose, which Item_Reviews to update.
     * 
    **/
    where: Item_ReviewsWhereUniqueInput
  }


  /**
   * Item_Reviews updateMany
   */
  export type Item_ReviewsUpdateManyArgs = {
    /**
     * The data used to update Item_Reviews.
     * 
    **/
    data: XOR<Item_ReviewsUpdateManyMutationInput, Item_ReviewsUncheckedUpdateManyInput>
    /**
     * Filter which Item_Reviews to update
     * 
    **/
    where?: Item_ReviewsWhereInput
  }


  /**
   * Item_Reviews upsert
   */
  export type Item_ReviewsUpsertArgs = {
    /**
     * Select specific fields to fetch from the Item_Reviews
     * 
    **/
    select?: Item_ReviewsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: Item_ReviewsInclude | null
    /**
     * The filter to search for the Item_Reviews to update in case it exists.
     * 
    **/
    where: Item_ReviewsWhereUniqueInput
    /**
     * In case the Item_Reviews found by the `where` argument doesn't exist, create a new Item_Reviews with this data.
     * 
    **/
    create: XOR<Item_ReviewsCreateInput, Item_ReviewsUncheckedCreateInput>
    /**
     * In case the Item_Reviews was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<Item_ReviewsUpdateInput, Item_ReviewsUncheckedUpdateInput>
  }


  /**
   * Item_Reviews delete
   */
  export type Item_ReviewsDeleteArgs = {
    /**
     * Select specific fields to fetch from the Item_Reviews
     * 
    **/
    select?: Item_ReviewsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: Item_ReviewsInclude | null
    /**
     * Filter which Item_Reviews to delete.
     * 
    **/
    where: Item_ReviewsWhereUniqueInput
  }


  /**
   * Item_Reviews deleteMany
   */
  export type Item_ReviewsDeleteManyArgs = {
    /**
     * Filter which Item_Reviews to delete
     * 
    **/
    where?: Item_ReviewsWhereInput
  }


  /**
   * Item_Reviews: findUniqueOrThrow
   */
  export type Item_ReviewsFindUniqueOrThrowArgs = Item_ReviewsFindUniqueArgsBase
      

  /**
   * Item_Reviews: findFirstOrThrow
   */
  export type Item_ReviewsFindFirstOrThrowArgs = Item_ReviewsFindFirstArgsBase
      

  /**
   * Item_Reviews without action
   */
  export type Item_ReviewsArgs = {
    /**
     * Select specific fields to fetch from the Item_Reviews
     * 
    **/
    select?: Item_ReviewsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: Item_ReviewsInclude | null
  }



  /**
   * Model Category
   */


  export type AggregateCategory = {
    _count: CategoryCountAggregateOutputType | null
    _avg: CategoryAvgAggregateOutputType | null
    _sum: CategorySumAggregateOutputType | null
    _min: CategoryMinAggregateOutputType | null
    _max: CategoryMaxAggregateOutputType | null
  }

  export type CategoryAvgAggregateOutputType = {
    id: number | null
  }

  export type CategorySumAggregateOutputType = {
    id: number | null
  }

  export type CategoryMinAggregateOutputType = {
    id: number | null
    name: string | null
  }

  export type CategoryMaxAggregateOutputType = {
    id: number | null
    name: string | null
  }

  export type CategoryCountAggregateOutputType = {
    id: number
    name: number
    _all: number
  }


  export type CategoryAvgAggregateInputType = {
    id?: true
  }

  export type CategorySumAggregateInputType = {
    id?: true
  }

  export type CategoryMinAggregateInputType = {
    id?: true
    name?: true
  }

  export type CategoryMaxAggregateInputType = {
    id?: true
    name?: true
  }

  export type CategoryCountAggregateInputType = {
    id?: true
    name?: true
    _all?: true
  }

  export type CategoryAggregateArgs = {
    /**
     * Filter which Category to aggregate.
     * 
    **/
    where?: CategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     * 
    **/
    orderBy?: Enumerable<CategoryOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: CategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Categories
    **/
    _count?: true | CategoryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CategoryAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CategorySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CategoryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CategoryMaxAggregateInputType
  }

  export type GetCategoryAggregateType<T extends CategoryAggregateArgs> = {
        [P in keyof T & keyof AggregateCategory]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCategory[P]>
      : GetScalarType<T[P], AggregateCategory[P]>
  }




  export type CategoryGroupByArgs = {
    where?: CategoryWhereInput
    orderBy?: Enumerable<CategoryOrderByWithAggregationInput>
    by: Array<CategoryScalarFieldEnum>
    having?: CategoryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CategoryCountAggregateInputType | true
    _avg?: CategoryAvgAggregateInputType
    _sum?: CategorySumAggregateInputType
    _min?: CategoryMinAggregateInputType
    _max?: CategoryMaxAggregateInputType
  }


  export type CategoryGroupByOutputType = {
    id: number
    name: string
    _count: CategoryCountAggregateOutputType | null
    _avg: CategoryAvgAggregateOutputType | null
    _sum: CategorySumAggregateOutputType | null
    _min: CategoryMinAggregateOutputType | null
    _max: CategoryMaxAggregateOutputType | null
  }

  type GetCategoryGroupByPayload<T extends CategoryGroupByArgs> = PrismaPromise<
    Array<
      PickArray<CategoryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CategoryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CategoryGroupByOutputType[P]>
            : GetScalarType<T[P], CategoryGroupByOutputType[P]>
        }
      >
    >


  export type CategorySelect = {
    id?: boolean
    name?: boolean
    items?: boolean | ItemsFindManyArgs
    _count?: boolean | CategoryCountOutputTypeArgs
  }


  export type CategoryInclude = {
    items?: boolean | ItemsFindManyArgs
    _count?: boolean | CategoryCountOutputTypeArgs
  } 

  export type CategoryGetPayload<S extends boolean | null | undefined | CategoryArgs, U = keyof S> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Category :
    S extends undefined ? never :
    S extends { include: any } & (CategoryArgs | CategoryFindManyArgs)
    ? Category  & {
    [P in TrueKeys<S['include']>]:
        P extends 'items' ? Array < ItemsGetPayload<Exclude<S['include'], undefined | null>[P]>>  :
        P extends '_count' ? CategoryCountOutputTypeGetPayload<Exclude<S['include'], undefined | null>[P]> :  never
  } 
    : S extends { select: any } & (CategoryArgs | CategoryFindManyArgs)
      ? {
    [P in TrueKeys<S['select']>]:
        P extends 'items' ? Array < ItemsGetPayload<Exclude<S['select'], undefined | null>[P]>>  :
        P extends '_count' ? CategoryCountOutputTypeGetPayload<Exclude<S['select'], undefined | null>[P]> :  P extends keyof Category ? Category[P] : never
  } 
      : Category


  type CategoryCountArgs = Merge<
    Omit<CategoryFindManyArgs, 'select' | 'include'> & {
      select?: CategoryCountAggregateInputType | true
    }
  >

  export interface CategoryDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Category that matches the filter.
     * @param {CategoryFindUniqueArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends CategoryFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, CategoryFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Category'> extends True ? Prisma__CategoryClient<CategoryGetPayload<T>> : Prisma__CategoryClient<CategoryGetPayload<T> | null, null>

    /**
     * Find the first Category that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryFindFirstArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends CategoryFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, CategoryFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Category'> extends True ? Prisma__CategoryClient<CategoryGetPayload<T>> : Prisma__CategoryClient<CategoryGetPayload<T> | null, null>

    /**
     * Find zero or more Categories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Categories
     * const categories = await prisma.category.findMany()
     * 
     * // Get first 10 Categories
     * const categories = await prisma.category.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const categoryWithIdOnly = await prisma.category.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends CategoryFindManyArgs>(
      args?: SelectSubset<T, CategoryFindManyArgs>
    ): PrismaPromise<Array<CategoryGetPayload<T>>>

    /**
     * Create a Category.
     * @param {CategoryCreateArgs} args - Arguments to create a Category.
     * @example
     * // Create one Category
     * const Category = await prisma.category.create({
     *   data: {
     *     // ... data to create a Category
     *   }
     * })
     * 
    **/
    create<T extends CategoryCreateArgs>(
      args: SelectSubset<T, CategoryCreateArgs>
    ): Prisma__CategoryClient<CategoryGetPayload<T>>

    /**
     * Create many Categories.
     *     @param {CategoryCreateManyArgs} args - Arguments to create many Categories.
     *     @example
     *     // Create many Categories
     *     const category = await prisma.category.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends CategoryCreateManyArgs>(
      args?: SelectSubset<T, CategoryCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Category.
     * @param {CategoryDeleteArgs} args - Arguments to delete one Category.
     * @example
     * // Delete one Category
     * const Category = await prisma.category.delete({
     *   where: {
     *     // ... filter to delete one Category
     *   }
     * })
     * 
    **/
    delete<T extends CategoryDeleteArgs>(
      args: SelectSubset<T, CategoryDeleteArgs>
    ): Prisma__CategoryClient<CategoryGetPayload<T>>

    /**
     * Update one Category.
     * @param {CategoryUpdateArgs} args - Arguments to update one Category.
     * @example
     * // Update one Category
     * const category = await prisma.category.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends CategoryUpdateArgs>(
      args: SelectSubset<T, CategoryUpdateArgs>
    ): Prisma__CategoryClient<CategoryGetPayload<T>>

    /**
     * Delete zero or more Categories.
     * @param {CategoryDeleteManyArgs} args - Arguments to filter Categories to delete.
     * @example
     * // Delete a few Categories
     * const { count } = await prisma.category.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends CategoryDeleteManyArgs>(
      args?: SelectSubset<T, CategoryDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Categories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Categories
     * const category = await prisma.category.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends CategoryUpdateManyArgs>(
      args: SelectSubset<T, CategoryUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Category.
     * @param {CategoryUpsertArgs} args - Arguments to update or create a Category.
     * @example
     * // Update or create a Category
     * const category = await prisma.category.upsert({
     *   create: {
     *     // ... data to create a Category
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Category we want to update
     *   }
     * })
    **/
    upsert<T extends CategoryUpsertArgs>(
      args: SelectSubset<T, CategoryUpsertArgs>
    ): Prisma__CategoryClient<CategoryGetPayload<T>>

    /**
     * Find one Category that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {CategoryFindUniqueOrThrowArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends CategoryFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, CategoryFindUniqueOrThrowArgs>
    ): Prisma__CategoryClient<CategoryGetPayload<T>>

    /**
     * Find the first Category that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryFindFirstOrThrowArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends CategoryFindFirstOrThrowArgs>(
      args?: SelectSubset<T, CategoryFindFirstOrThrowArgs>
    ): Prisma__CategoryClient<CategoryGetPayload<T>>

    /**
     * Count the number of Categories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryCountArgs} args - Arguments to filter Categories to count.
     * @example
     * // Count the number of Categories
     * const count = await prisma.category.count({
     *   where: {
     *     // ... the filter for the Categories we want to count
     *   }
     * })
    **/
    count<T extends CategoryCountArgs>(
      args?: Subset<T, CategoryCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CategoryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Category.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CategoryAggregateArgs>(args: Subset<T, CategoryAggregateArgs>): PrismaPromise<GetCategoryAggregateType<T>>

    /**
     * Group by Category.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CategoryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CategoryGroupByArgs['orderBy'] }
        : { orderBy?: CategoryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CategoryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCategoryGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Category.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__CategoryClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    items<T extends ItemsFindManyArgs= {}>(args?: Subset<T, ItemsFindManyArgs>): PrismaPromise<Array<ItemsGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Category base type for findUnique actions
   */
  export type CategoryFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Category
     * 
    **/
    select?: CategorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CategoryInclude | null
    /**
     * Filter, which Category to fetch.
     * 
    **/
    where: CategoryWhereUniqueInput
  }

  /**
   * Category: findUnique
   */
  export interface CategoryFindUniqueArgs extends CategoryFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Category base type for findFirst actions
   */
  export type CategoryFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Category
     * 
    **/
    select?: CategorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CategoryInclude | null
    /**
     * Filter, which Category to fetch.
     * 
    **/
    where?: CategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     * 
    **/
    orderBy?: Enumerable<CategoryOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Categories.
     * 
    **/
    cursor?: CategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Categories.
     * 
    **/
    distinct?: Enumerable<CategoryScalarFieldEnum>
  }

  /**
   * Category: findFirst
   */
  export interface CategoryFindFirstArgs extends CategoryFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Category findMany
   */
  export type CategoryFindManyArgs = {
    /**
     * Select specific fields to fetch from the Category
     * 
    **/
    select?: CategorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CategoryInclude | null
    /**
     * Filter, which Categories to fetch.
     * 
    **/
    where?: CategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     * 
    **/
    orderBy?: Enumerable<CategoryOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Categories.
     * 
    **/
    cursor?: CategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     * 
    **/
    skip?: number
    distinct?: Enumerable<CategoryScalarFieldEnum>
  }


  /**
   * Category create
   */
  export type CategoryCreateArgs = {
    /**
     * Select specific fields to fetch from the Category
     * 
    **/
    select?: CategorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CategoryInclude | null
    /**
     * The data needed to create a Category.
     * 
    **/
    data: XOR<CategoryCreateInput, CategoryUncheckedCreateInput>
  }


  /**
   * Category createMany
   */
  export type CategoryCreateManyArgs = {
    /**
     * The data used to create many Categories.
     * 
    **/
    data: Enumerable<CategoryCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Category update
   */
  export type CategoryUpdateArgs = {
    /**
     * Select specific fields to fetch from the Category
     * 
    **/
    select?: CategorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CategoryInclude | null
    /**
     * The data needed to update a Category.
     * 
    **/
    data: XOR<CategoryUpdateInput, CategoryUncheckedUpdateInput>
    /**
     * Choose, which Category to update.
     * 
    **/
    where: CategoryWhereUniqueInput
  }


  /**
   * Category updateMany
   */
  export type CategoryUpdateManyArgs = {
    /**
     * The data used to update Categories.
     * 
    **/
    data: XOR<CategoryUpdateManyMutationInput, CategoryUncheckedUpdateManyInput>
    /**
     * Filter which Categories to update
     * 
    **/
    where?: CategoryWhereInput
  }


  /**
   * Category upsert
   */
  export type CategoryUpsertArgs = {
    /**
     * Select specific fields to fetch from the Category
     * 
    **/
    select?: CategorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CategoryInclude | null
    /**
     * The filter to search for the Category to update in case it exists.
     * 
    **/
    where: CategoryWhereUniqueInput
    /**
     * In case the Category found by the `where` argument doesn't exist, create a new Category with this data.
     * 
    **/
    create: XOR<CategoryCreateInput, CategoryUncheckedCreateInput>
    /**
     * In case the Category was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<CategoryUpdateInput, CategoryUncheckedUpdateInput>
  }


  /**
   * Category delete
   */
  export type CategoryDeleteArgs = {
    /**
     * Select specific fields to fetch from the Category
     * 
    **/
    select?: CategorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CategoryInclude | null
    /**
     * Filter which Category to delete.
     * 
    **/
    where: CategoryWhereUniqueInput
  }


  /**
   * Category deleteMany
   */
  export type CategoryDeleteManyArgs = {
    /**
     * Filter which Categories to delete
     * 
    **/
    where?: CategoryWhereInput
  }


  /**
   * Category: findUniqueOrThrow
   */
  export type CategoryFindUniqueOrThrowArgs = CategoryFindUniqueArgsBase
      

  /**
   * Category: findFirstOrThrow
   */
  export type CategoryFindFirstOrThrowArgs = CategoryFindFirstArgsBase
      

  /**
   * Category without action
   */
  export type CategoryArgs = {
    /**
     * Select specific fields to fetch from the Category
     * 
    **/
    select?: CategorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CategoryInclude | null
  }



  /**
   * Enums
   */

  // Based on
  // https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

  export const CategoryScalarFieldEnum: {
    id: 'id',
    name: 'name'
  };

  export type CategoryScalarFieldEnum = (typeof CategoryScalarFieldEnum)[keyof typeof CategoryScalarFieldEnum]


  export const Item_ReviewsScalarFieldEnum: {
    id: 'id',
    itemId: 'itemId',
    reviewId: 'reviewId'
  };

  export type Item_ReviewsScalarFieldEnum = (typeof Item_ReviewsScalarFieldEnum)[keyof typeof Item_ReviewsScalarFieldEnum]


  export const ItemsScalarFieldEnum: {
    id: 'id',
    name: 'name',
    description: 'description',
    stockQty: 'stockQty',
    isFeatured: 'isFeatured',
    onSale: 'onSale',
    imageUrl: 'imageUrl',
    categoryId: 'categoryId'
  };

  export type ItemsScalarFieldEnum = (typeof ItemsScalarFieldEnum)[keyof typeof ItemsScalarFieldEnum]


  export const Order_ItemsScalarFieldEnum: {
    id: 'id',
    orderId: 'orderId',
    itemId: 'itemId',
    quantity: 'quantity'
  };

  export type Order_ItemsScalarFieldEnum = (typeof Order_ItemsScalarFieldEnum)[keyof typeof Order_ItemsScalarFieldEnum]


  export const OrdersScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    status: 'status',
    is_cart: 'is_cart'
  };

  export type OrdersScalarFieldEnum = (typeof OrdersScalarFieldEnum)[keyof typeof OrdersScalarFieldEnum]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const ReviewsScalarFieldEnum: {
    id: 'id',
    title: 'title',
    stars: 'stars',
    content: 'content',
    userId: 'userId'
  };

  export type ReviewsScalarFieldEnum = (typeof ReviewsScalarFieldEnum)[keyof typeof ReviewsScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UsersScalarFieldEnum: {
    id: 'id',
    username: 'username',
    password: 'password',
    email: 'email',
    is_admin: 'is_admin'
  };

  export type UsersScalarFieldEnum = (typeof UsersScalarFieldEnum)[keyof typeof UsersScalarFieldEnum]


  /**
   * Deep Input Types
   */


  export type UsersWhereInput = {
    AND?: Enumerable<UsersWhereInput>
    OR?: Enumerable<UsersWhereInput>
    NOT?: Enumerable<UsersWhereInput>
    id?: IntFilter | number
    username?: StringFilter | string
    password?: StringFilter | string
    email?: StringFilter | string
    is_admin?: BoolNullableFilter | boolean | null
    orders?: OrdersListRelationFilter
    reviews?: ReviewsListRelationFilter
  }

  export type UsersOrderByWithRelationInput = {
    id?: SortOrder
    username?: SortOrder
    password?: SortOrder
    email?: SortOrder
    is_admin?: SortOrder
    orders?: OrdersOrderByRelationAggregateInput
    reviews?: ReviewsOrderByRelationAggregateInput
  }

  export type UsersWhereUniqueInput = {
    id?: number
  }

  export type UsersOrderByWithAggregationInput = {
    id?: SortOrder
    username?: SortOrder
    password?: SortOrder
    email?: SortOrder
    is_admin?: SortOrder
    _count?: UsersCountOrderByAggregateInput
    _avg?: UsersAvgOrderByAggregateInput
    _max?: UsersMaxOrderByAggregateInput
    _min?: UsersMinOrderByAggregateInput
    _sum?: UsersSumOrderByAggregateInput
  }

  export type UsersScalarWhereWithAggregatesInput = {
    AND?: Enumerable<UsersScalarWhereWithAggregatesInput>
    OR?: Enumerable<UsersScalarWhereWithAggregatesInput>
    NOT?: Enumerable<UsersScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    username?: StringWithAggregatesFilter | string
    password?: StringWithAggregatesFilter | string
    email?: StringWithAggregatesFilter | string
    is_admin?: BoolNullableWithAggregatesFilter | boolean | null
  }

  export type OrdersWhereInput = {
    AND?: Enumerable<OrdersWhereInput>
    OR?: Enumerable<OrdersWhereInput>
    NOT?: Enumerable<OrdersWhereInput>
    id?: IntFilter | number
    userId?: IntFilter | number
    status?: StringFilter | string
    is_cart?: BoolFilter | boolean
    users?: XOR<UsersRelationFilter, UsersWhereInput> | null
    order_items?: Order_ItemsListRelationFilter
  }

  export type OrdersOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    status?: SortOrder
    is_cart?: SortOrder
    users?: UsersOrderByWithRelationInput
    order_items?: Order_ItemsOrderByRelationAggregateInput
  }

  export type OrdersWhereUniqueInput = {
    id?: number
  }

  export type OrdersOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    status?: SortOrder
    is_cart?: SortOrder
    _count?: OrdersCountOrderByAggregateInput
    _avg?: OrdersAvgOrderByAggregateInput
    _max?: OrdersMaxOrderByAggregateInput
    _min?: OrdersMinOrderByAggregateInput
    _sum?: OrdersSumOrderByAggregateInput
  }

  export type OrdersScalarWhereWithAggregatesInput = {
    AND?: Enumerable<OrdersScalarWhereWithAggregatesInput>
    OR?: Enumerable<OrdersScalarWhereWithAggregatesInput>
    NOT?: Enumerable<OrdersScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    userId?: IntWithAggregatesFilter | number
    status?: StringWithAggregatesFilter | string
    is_cart?: BoolWithAggregatesFilter | boolean
  }

  export type ItemsWhereInput = {
    AND?: Enumerable<ItemsWhereInput>
    OR?: Enumerable<ItemsWhereInput>
    NOT?: Enumerable<ItemsWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
    description?: StringFilter | string
    stockQty?: IntFilter | number
    isFeatured?: BoolFilter | boolean
    onSale?: BoolFilter | boolean
    imageUrl?: StringFilter | string
    categoryId?: IntFilter | number
    order_items?: Order_ItemsListRelationFilter
    item_reviews?: Item_ReviewsListRelationFilter
    category?: XOR<CategoryRelationFilter, CategoryWhereInput> | null
  }

  export type ItemsOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    stockQty?: SortOrder
    isFeatured?: SortOrder
    onSale?: SortOrder
    imageUrl?: SortOrder
    categoryId?: SortOrder
    order_items?: Order_ItemsOrderByRelationAggregateInput
    item_reviews?: Item_ReviewsOrderByRelationAggregateInput
    category?: CategoryOrderByWithRelationInput
  }

  export type ItemsWhereUniqueInput = {
    id?: number
  }

  export type ItemsOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    stockQty?: SortOrder
    isFeatured?: SortOrder
    onSale?: SortOrder
    imageUrl?: SortOrder
    categoryId?: SortOrder
    _count?: ItemsCountOrderByAggregateInput
    _avg?: ItemsAvgOrderByAggregateInput
    _max?: ItemsMaxOrderByAggregateInput
    _min?: ItemsMinOrderByAggregateInput
    _sum?: ItemsSumOrderByAggregateInput
  }

  export type ItemsScalarWhereWithAggregatesInput = {
    AND?: Enumerable<ItemsScalarWhereWithAggregatesInput>
    OR?: Enumerable<ItemsScalarWhereWithAggregatesInput>
    NOT?: Enumerable<ItemsScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    name?: StringWithAggregatesFilter | string
    description?: StringWithAggregatesFilter | string
    stockQty?: IntWithAggregatesFilter | number
    isFeatured?: BoolWithAggregatesFilter | boolean
    onSale?: BoolWithAggregatesFilter | boolean
    imageUrl?: StringWithAggregatesFilter | string
    categoryId?: IntWithAggregatesFilter | number
  }

  export type Order_ItemsWhereInput = {
    AND?: Enumerable<Order_ItemsWhereInput>
    OR?: Enumerable<Order_ItemsWhereInput>
    NOT?: Enumerable<Order_ItemsWhereInput>
    id?: IntFilter | number
    orderId?: IntFilter | number
    itemId?: IntFilter | number
    quantity?: IntFilter | number
    orders?: XOR<OrdersRelationFilter, OrdersWhereInput> | null
    items?: XOR<ItemsRelationFilter, ItemsWhereInput> | null
  }

  export type Order_ItemsOrderByWithRelationInput = {
    id?: SortOrder
    orderId?: SortOrder
    itemId?: SortOrder
    quantity?: SortOrder
    orders?: OrdersOrderByWithRelationInput
    items?: ItemsOrderByWithRelationInput
  }

  export type Order_ItemsWhereUniqueInput = {
    id?: number
  }

  export type Order_ItemsOrderByWithAggregationInput = {
    id?: SortOrder
    orderId?: SortOrder
    itemId?: SortOrder
    quantity?: SortOrder
    _count?: Order_ItemsCountOrderByAggregateInput
    _avg?: Order_ItemsAvgOrderByAggregateInput
    _max?: Order_ItemsMaxOrderByAggregateInput
    _min?: Order_ItemsMinOrderByAggregateInput
    _sum?: Order_ItemsSumOrderByAggregateInput
  }

  export type Order_ItemsScalarWhereWithAggregatesInput = {
    AND?: Enumerable<Order_ItemsScalarWhereWithAggregatesInput>
    OR?: Enumerable<Order_ItemsScalarWhereWithAggregatesInput>
    NOT?: Enumerable<Order_ItemsScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    orderId?: IntWithAggregatesFilter | number
    itemId?: IntWithAggregatesFilter | number
    quantity?: IntWithAggregatesFilter | number
  }

  export type ReviewsWhereInput = {
    AND?: Enumerable<ReviewsWhereInput>
    OR?: Enumerable<ReviewsWhereInput>
    NOT?: Enumerable<ReviewsWhereInput>
    id?: IntFilter | number
    title?: StringFilter | string
    stars?: IntFilter | number
    content?: StringFilter | string
    userId?: IntFilter | number
    item_reviews?: Item_ReviewsListRelationFilter
    users?: XOR<UsersRelationFilter, UsersWhereInput> | null
  }

  export type ReviewsOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    stars?: SortOrder
    content?: SortOrder
    userId?: SortOrder
    item_reviews?: Item_ReviewsOrderByRelationAggregateInput
    users?: UsersOrderByWithRelationInput
  }

  export type ReviewsWhereUniqueInput = {
    id?: number
  }

  export type ReviewsOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    stars?: SortOrder
    content?: SortOrder
    userId?: SortOrder
    _count?: ReviewsCountOrderByAggregateInput
    _avg?: ReviewsAvgOrderByAggregateInput
    _max?: ReviewsMaxOrderByAggregateInput
    _min?: ReviewsMinOrderByAggregateInput
    _sum?: ReviewsSumOrderByAggregateInput
  }

  export type ReviewsScalarWhereWithAggregatesInput = {
    AND?: Enumerable<ReviewsScalarWhereWithAggregatesInput>
    OR?: Enumerable<ReviewsScalarWhereWithAggregatesInput>
    NOT?: Enumerable<ReviewsScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    title?: StringWithAggregatesFilter | string
    stars?: IntWithAggregatesFilter | number
    content?: StringWithAggregatesFilter | string
    userId?: IntWithAggregatesFilter | number
  }

  export type Item_ReviewsWhereInput = {
    AND?: Enumerable<Item_ReviewsWhereInput>
    OR?: Enumerable<Item_ReviewsWhereInput>
    NOT?: Enumerable<Item_ReviewsWhereInput>
    id?: IntFilter | number
    itemId?: IntFilter | number
    reviewId?: IntFilter | number
    items?: XOR<ItemsRelationFilter, ItemsWhereInput> | null
    reviews?: XOR<ReviewsRelationFilter, ReviewsWhereInput> | null
  }

  export type Item_ReviewsOrderByWithRelationInput = {
    id?: SortOrder
    itemId?: SortOrder
    reviewId?: SortOrder
    items?: ItemsOrderByWithRelationInput
    reviews?: ReviewsOrderByWithRelationInput
  }

  export type Item_ReviewsWhereUniqueInput = {
    id?: number
  }

  export type Item_ReviewsOrderByWithAggregationInput = {
    id?: SortOrder
    itemId?: SortOrder
    reviewId?: SortOrder
    _count?: Item_ReviewsCountOrderByAggregateInput
    _avg?: Item_ReviewsAvgOrderByAggregateInput
    _max?: Item_ReviewsMaxOrderByAggregateInput
    _min?: Item_ReviewsMinOrderByAggregateInput
    _sum?: Item_ReviewsSumOrderByAggregateInput
  }

  export type Item_ReviewsScalarWhereWithAggregatesInput = {
    AND?: Enumerable<Item_ReviewsScalarWhereWithAggregatesInput>
    OR?: Enumerable<Item_ReviewsScalarWhereWithAggregatesInput>
    NOT?: Enumerable<Item_ReviewsScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    itemId?: IntWithAggregatesFilter | number
    reviewId?: IntWithAggregatesFilter | number
  }

  export type CategoryWhereInput = {
    AND?: Enumerable<CategoryWhereInput>
    OR?: Enumerable<CategoryWhereInput>
    NOT?: Enumerable<CategoryWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
    items?: ItemsListRelationFilter
  }

  export type CategoryOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    items?: ItemsOrderByRelationAggregateInput
  }

  export type CategoryWhereUniqueInput = {
    id?: number
  }

  export type CategoryOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    _count?: CategoryCountOrderByAggregateInput
    _avg?: CategoryAvgOrderByAggregateInput
    _max?: CategoryMaxOrderByAggregateInput
    _min?: CategoryMinOrderByAggregateInput
    _sum?: CategorySumOrderByAggregateInput
  }

  export type CategoryScalarWhereWithAggregatesInput = {
    AND?: Enumerable<CategoryScalarWhereWithAggregatesInput>
    OR?: Enumerable<CategoryScalarWhereWithAggregatesInput>
    NOT?: Enumerable<CategoryScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    name?: StringWithAggregatesFilter | string
  }

  export type UsersCreateInput = {
    username: string
    password: string
    email: string
    is_admin?: boolean | null
    orders?: OrdersCreateNestedManyWithoutUsersInput
    reviews?: ReviewsCreateNestedManyWithoutUsersInput
  }

  export type UsersUncheckedCreateInput = {
    id?: number
    username: string
    password: string
    email: string
    is_admin?: boolean | null
    orders?: OrdersUncheckedCreateNestedManyWithoutUsersInput
    reviews?: ReviewsUncheckedCreateNestedManyWithoutUsersInput
  }

  export type UsersUpdateInput = {
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    is_admin?: NullableBoolFieldUpdateOperationsInput | boolean | null
    orders?: OrdersUpdateManyWithoutUsersNestedInput
    reviews?: ReviewsUpdateManyWithoutUsersNestedInput
  }

  export type UsersUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    is_admin?: NullableBoolFieldUpdateOperationsInput | boolean | null
    orders?: OrdersUncheckedUpdateManyWithoutUsersNestedInput
    reviews?: ReviewsUncheckedUpdateManyWithoutUsersNestedInput
  }

  export type UsersCreateManyInput = {
    id?: number
    username: string
    password: string
    email: string
    is_admin?: boolean | null
  }

  export type UsersUpdateManyMutationInput = {
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    is_admin?: NullableBoolFieldUpdateOperationsInput | boolean | null
  }

  export type UsersUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    is_admin?: NullableBoolFieldUpdateOperationsInput | boolean | null
  }

  export type OrdersCreateInput = {
    status: string
    is_cart?: boolean
    users?: UsersCreateNestedOneWithoutOrdersInput
    order_items?: Order_ItemsCreateNestedManyWithoutOrdersInput
  }

  export type OrdersUncheckedCreateInput = {
    id?: number
    userId: number
    status: string
    is_cart?: boolean
    order_items?: Order_ItemsUncheckedCreateNestedManyWithoutOrdersInput
  }

  export type OrdersUpdateInput = {
    status?: StringFieldUpdateOperationsInput | string
    is_cart?: BoolFieldUpdateOperationsInput | boolean
    users?: UsersUpdateOneWithoutOrdersNestedInput
    order_items?: Order_ItemsUpdateManyWithoutOrdersNestedInput
  }

  export type OrdersUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    is_cart?: BoolFieldUpdateOperationsInput | boolean
    order_items?: Order_ItemsUncheckedUpdateManyWithoutOrdersNestedInput
  }

  export type OrdersCreateManyInput = {
    id?: number
    userId: number
    status: string
    is_cart?: boolean
  }

  export type OrdersUpdateManyMutationInput = {
    status?: StringFieldUpdateOperationsInput | string
    is_cart?: BoolFieldUpdateOperationsInput | boolean
  }

  export type OrdersUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    is_cart?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ItemsCreateInput = {
    name: string
    description: string
    stockQty: number
    isFeatured?: boolean
    onSale?: boolean
    imageUrl: string
    order_items?: Order_ItemsCreateNestedManyWithoutItemsInput
    item_reviews?: Item_ReviewsCreateNestedManyWithoutItemsInput
    category?: CategoryCreateNestedOneWithoutItemsInput
  }

  export type ItemsUncheckedCreateInput = {
    id?: number
    name: string
    description: string
    stockQty: number
    isFeatured?: boolean
    onSale?: boolean
    imageUrl: string
    categoryId: number
    order_items?: Order_ItemsUncheckedCreateNestedManyWithoutItemsInput
    item_reviews?: Item_ReviewsUncheckedCreateNestedManyWithoutItemsInput
  }

  export type ItemsUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    stockQty?: IntFieldUpdateOperationsInput | number
    isFeatured?: BoolFieldUpdateOperationsInput | boolean
    onSale?: BoolFieldUpdateOperationsInput | boolean
    imageUrl?: StringFieldUpdateOperationsInput | string
    order_items?: Order_ItemsUpdateManyWithoutItemsNestedInput
    item_reviews?: Item_ReviewsUpdateManyWithoutItemsNestedInput
    category?: CategoryUpdateOneWithoutItemsNestedInput
  }

  export type ItemsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    stockQty?: IntFieldUpdateOperationsInput | number
    isFeatured?: BoolFieldUpdateOperationsInput | boolean
    onSale?: BoolFieldUpdateOperationsInput | boolean
    imageUrl?: StringFieldUpdateOperationsInput | string
    categoryId?: IntFieldUpdateOperationsInput | number
    order_items?: Order_ItemsUncheckedUpdateManyWithoutItemsNestedInput
    item_reviews?: Item_ReviewsUncheckedUpdateManyWithoutItemsNestedInput
  }

  export type ItemsCreateManyInput = {
    id?: number
    name: string
    description: string
    stockQty: number
    isFeatured?: boolean
    onSale?: boolean
    imageUrl: string
    categoryId: number
  }

  export type ItemsUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    stockQty?: IntFieldUpdateOperationsInput | number
    isFeatured?: BoolFieldUpdateOperationsInput | boolean
    onSale?: BoolFieldUpdateOperationsInput | boolean
    imageUrl?: StringFieldUpdateOperationsInput | string
  }

  export type ItemsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    stockQty?: IntFieldUpdateOperationsInput | number
    isFeatured?: BoolFieldUpdateOperationsInput | boolean
    onSale?: BoolFieldUpdateOperationsInput | boolean
    imageUrl?: StringFieldUpdateOperationsInput | string
    categoryId?: IntFieldUpdateOperationsInput | number
  }

  export type Order_ItemsCreateInput = {
    quantity: number
    orders?: OrdersCreateNestedOneWithoutOrder_itemsInput
    items?: ItemsCreateNestedOneWithoutOrder_itemsInput
  }

  export type Order_ItemsUncheckedCreateInput = {
    id?: number
    orderId: number
    itemId: number
    quantity: number
  }

  export type Order_ItemsUpdateInput = {
    quantity?: IntFieldUpdateOperationsInput | number
    orders?: OrdersUpdateOneWithoutOrder_itemsNestedInput
    items?: ItemsUpdateOneWithoutOrder_itemsNestedInput
  }

  export type Order_ItemsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    orderId?: IntFieldUpdateOperationsInput | number
    itemId?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
  }

  export type Order_ItemsCreateManyInput = {
    id?: number
    orderId: number
    itemId: number
    quantity: number
  }

  export type Order_ItemsUpdateManyMutationInput = {
    quantity?: IntFieldUpdateOperationsInput | number
  }

  export type Order_ItemsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    orderId?: IntFieldUpdateOperationsInput | number
    itemId?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
  }

  export type ReviewsCreateInput = {
    title: string
    stars: number
    content: string
    item_reviews?: Item_ReviewsCreateNestedManyWithoutReviewsInput
    users?: UsersCreateNestedOneWithoutReviewsInput
  }

  export type ReviewsUncheckedCreateInput = {
    id?: number
    title: string
    stars: number
    content: string
    userId: number
    item_reviews?: Item_ReviewsUncheckedCreateNestedManyWithoutReviewsInput
  }

  export type ReviewsUpdateInput = {
    title?: StringFieldUpdateOperationsInput | string
    stars?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
    item_reviews?: Item_ReviewsUpdateManyWithoutReviewsNestedInput
    users?: UsersUpdateOneWithoutReviewsNestedInput
  }

  export type ReviewsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    stars?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
    item_reviews?: Item_ReviewsUncheckedUpdateManyWithoutReviewsNestedInput
  }

  export type ReviewsCreateManyInput = {
    id?: number
    title: string
    stars: number
    content: string
    userId: number
  }

  export type ReviewsUpdateManyMutationInput = {
    title?: StringFieldUpdateOperationsInput | string
    stars?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
  }

  export type ReviewsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    stars?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
  }

  export type Item_ReviewsCreateInput = {
    items?: ItemsCreateNestedOneWithoutItem_reviewsInput
    reviews?: ReviewsCreateNestedOneWithoutItem_reviewsInput
  }

  export type Item_ReviewsUncheckedCreateInput = {
    id?: number
    itemId: number
    reviewId: number
  }

  export type Item_ReviewsUpdateInput = {
    items?: ItemsUpdateOneWithoutItem_reviewsNestedInput
    reviews?: ReviewsUpdateOneWithoutItem_reviewsNestedInput
  }

  export type Item_ReviewsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    itemId?: IntFieldUpdateOperationsInput | number
    reviewId?: IntFieldUpdateOperationsInput | number
  }

  export type Item_ReviewsCreateManyInput = {
    id?: number
    itemId: number
    reviewId: number
  }

  export type Item_ReviewsUpdateManyMutationInput = {

  }

  export type Item_ReviewsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    itemId?: IntFieldUpdateOperationsInput | number
    reviewId?: IntFieldUpdateOperationsInput | number
  }

  export type CategoryCreateInput = {
    name: string
    items?: ItemsCreateNestedManyWithoutCategoryInput
  }

  export type CategoryUncheckedCreateInput = {
    id?: number
    name: string
    items?: ItemsUncheckedCreateNestedManyWithoutCategoryInput
  }

  export type CategoryUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    items?: ItemsUpdateManyWithoutCategoryNestedInput
  }

  export type CategoryUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    items?: ItemsUncheckedUpdateManyWithoutCategoryNestedInput
  }

  export type CategoryCreateManyInput = {
    id?: number
    name: string
  }

  export type CategoryUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type CategoryUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringFilter | string
  }

  export type BoolNullableFilter = {
    equals?: boolean | null
    not?: NestedBoolNullableFilter | boolean | null
  }

  export type OrdersListRelationFilter = {
    every?: OrdersWhereInput
    some?: OrdersWhereInput
    none?: OrdersWhereInput
  }

  export type ReviewsListRelationFilter = {
    every?: ReviewsWhereInput
    some?: ReviewsWhereInput
    none?: ReviewsWhereInput
  }

  export type OrdersOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ReviewsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UsersCountOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    password?: SortOrder
    email?: SortOrder
    is_admin?: SortOrder
  }

  export type UsersAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type UsersMaxOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    password?: SortOrder
    email?: SortOrder
    is_admin?: SortOrder
  }

  export type UsersMinOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    password?: SortOrder
    email?: SortOrder
    is_admin?: SortOrder
  }

  export type UsersSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type StringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type BoolNullableWithAggregatesFilter = {
    equals?: boolean | null
    not?: NestedBoolNullableWithAggregatesFilter | boolean | null
    _count?: NestedIntNullableFilter
    _min?: NestedBoolNullableFilter
    _max?: NestedBoolNullableFilter
  }

  export type BoolFilter = {
    equals?: boolean
    not?: NestedBoolFilter | boolean
  }

  export type UsersRelationFilter = {
    is?: UsersWhereInput | null
    isNot?: UsersWhereInput | null
  }

  export type Order_ItemsListRelationFilter = {
    every?: Order_ItemsWhereInput
    some?: Order_ItemsWhereInput
    none?: Order_ItemsWhereInput
  }

  export type Order_ItemsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type OrdersCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    status?: SortOrder
    is_cart?: SortOrder
  }

  export type OrdersAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type OrdersMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    status?: SortOrder
    is_cart?: SortOrder
  }

  export type OrdersMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    status?: SortOrder
    is_cart?: SortOrder
  }

  export type OrdersSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type BoolWithAggregatesFilter = {
    equals?: boolean
    not?: NestedBoolWithAggregatesFilter | boolean
    _count?: NestedIntFilter
    _min?: NestedBoolFilter
    _max?: NestedBoolFilter
  }

  export type Item_ReviewsListRelationFilter = {
    every?: Item_ReviewsWhereInput
    some?: Item_ReviewsWhereInput
    none?: Item_ReviewsWhereInput
  }

  export type CategoryRelationFilter = {
    is?: CategoryWhereInput | null
    isNot?: CategoryWhereInput | null
  }

  export type Item_ReviewsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ItemsCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    stockQty?: SortOrder
    isFeatured?: SortOrder
    onSale?: SortOrder
    imageUrl?: SortOrder
    categoryId?: SortOrder
  }

  export type ItemsAvgOrderByAggregateInput = {
    id?: SortOrder
    stockQty?: SortOrder
    categoryId?: SortOrder
  }

  export type ItemsMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    stockQty?: SortOrder
    isFeatured?: SortOrder
    onSale?: SortOrder
    imageUrl?: SortOrder
    categoryId?: SortOrder
  }

  export type ItemsMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    stockQty?: SortOrder
    isFeatured?: SortOrder
    onSale?: SortOrder
    imageUrl?: SortOrder
    categoryId?: SortOrder
  }

  export type ItemsSumOrderByAggregateInput = {
    id?: SortOrder
    stockQty?: SortOrder
    categoryId?: SortOrder
  }

  export type OrdersRelationFilter = {
    is?: OrdersWhereInput | null
    isNot?: OrdersWhereInput | null
  }

  export type ItemsRelationFilter = {
    is?: ItemsWhereInput | null
    isNot?: ItemsWhereInput | null
  }

  export type Order_ItemsCountOrderByAggregateInput = {
    id?: SortOrder
    orderId?: SortOrder
    itemId?: SortOrder
    quantity?: SortOrder
  }

  export type Order_ItemsAvgOrderByAggregateInput = {
    id?: SortOrder
    orderId?: SortOrder
    itemId?: SortOrder
    quantity?: SortOrder
  }

  export type Order_ItemsMaxOrderByAggregateInput = {
    id?: SortOrder
    orderId?: SortOrder
    itemId?: SortOrder
    quantity?: SortOrder
  }

  export type Order_ItemsMinOrderByAggregateInput = {
    id?: SortOrder
    orderId?: SortOrder
    itemId?: SortOrder
    quantity?: SortOrder
  }

  export type Order_ItemsSumOrderByAggregateInput = {
    id?: SortOrder
    orderId?: SortOrder
    itemId?: SortOrder
    quantity?: SortOrder
  }

  export type ReviewsCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    stars?: SortOrder
    content?: SortOrder
    userId?: SortOrder
  }

  export type ReviewsAvgOrderByAggregateInput = {
    id?: SortOrder
    stars?: SortOrder
    userId?: SortOrder
  }

  export type ReviewsMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    stars?: SortOrder
    content?: SortOrder
    userId?: SortOrder
  }

  export type ReviewsMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    stars?: SortOrder
    content?: SortOrder
    userId?: SortOrder
  }

  export type ReviewsSumOrderByAggregateInput = {
    id?: SortOrder
    stars?: SortOrder
    userId?: SortOrder
  }

  export type ReviewsRelationFilter = {
    is?: ReviewsWhereInput | null
    isNot?: ReviewsWhereInput | null
  }

  export type Item_ReviewsCountOrderByAggregateInput = {
    id?: SortOrder
    itemId?: SortOrder
    reviewId?: SortOrder
  }

  export type Item_ReviewsAvgOrderByAggregateInput = {
    id?: SortOrder
    itemId?: SortOrder
    reviewId?: SortOrder
  }

  export type Item_ReviewsMaxOrderByAggregateInput = {
    id?: SortOrder
    itemId?: SortOrder
    reviewId?: SortOrder
  }

  export type Item_ReviewsMinOrderByAggregateInput = {
    id?: SortOrder
    itemId?: SortOrder
    reviewId?: SortOrder
  }

  export type Item_ReviewsSumOrderByAggregateInput = {
    id?: SortOrder
    itemId?: SortOrder
    reviewId?: SortOrder
  }

  export type ItemsListRelationFilter = {
    every?: ItemsWhereInput
    some?: ItemsWhereInput
    none?: ItemsWhereInput
  }

  export type ItemsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CategoryCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type CategoryAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type CategoryMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type CategoryMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type CategorySumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type OrdersCreateNestedManyWithoutUsersInput = {
    create?: XOR<Enumerable<OrdersCreateWithoutUsersInput>, Enumerable<OrdersUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<OrdersCreateOrConnectWithoutUsersInput>
    createMany?: OrdersCreateManyUsersInputEnvelope
    connect?: Enumerable<OrdersWhereUniqueInput>
  }

  export type ReviewsCreateNestedManyWithoutUsersInput = {
    create?: XOR<Enumerable<ReviewsCreateWithoutUsersInput>, Enumerable<ReviewsUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<ReviewsCreateOrConnectWithoutUsersInput>
    createMany?: ReviewsCreateManyUsersInputEnvelope
    connect?: Enumerable<ReviewsWhereUniqueInput>
  }

  export type OrdersUncheckedCreateNestedManyWithoutUsersInput = {
    create?: XOR<Enumerable<OrdersCreateWithoutUsersInput>, Enumerable<OrdersUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<OrdersCreateOrConnectWithoutUsersInput>
    createMany?: OrdersCreateManyUsersInputEnvelope
    connect?: Enumerable<OrdersWhereUniqueInput>
  }

  export type ReviewsUncheckedCreateNestedManyWithoutUsersInput = {
    create?: XOR<Enumerable<ReviewsCreateWithoutUsersInput>, Enumerable<ReviewsUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<ReviewsCreateOrConnectWithoutUsersInput>
    createMany?: ReviewsCreateManyUsersInputEnvelope
    connect?: Enumerable<ReviewsWhereUniqueInput>
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableBoolFieldUpdateOperationsInput = {
    set?: boolean | null
  }

  export type OrdersUpdateManyWithoutUsersNestedInput = {
    create?: XOR<Enumerable<OrdersCreateWithoutUsersInput>, Enumerable<OrdersUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<OrdersCreateOrConnectWithoutUsersInput>
    upsert?: Enumerable<OrdersUpsertWithWhereUniqueWithoutUsersInput>
    createMany?: OrdersCreateManyUsersInputEnvelope
    set?: Enumerable<OrdersWhereUniqueInput>
    disconnect?: Enumerable<OrdersWhereUniqueInput>
    delete?: Enumerable<OrdersWhereUniqueInput>
    connect?: Enumerable<OrdersWhereUniqueInput>
    update?: Enumerable<OrdersUpdateWithWhereUniqueWithoutUsersInput>
    updateMany?: Enumerable<OrdersUpdateManyWithWhereWithoutUsersInput>
    deleteMany?: Enumerable<OrdersScalarWhereInput>
  }

  export type ReviewsUpdateManyWithoutUsersNestedInput = {
    create?: XOR<Enumerable<ReviewsCreateWithoutUsersInput>, Enumerable<ReviewsUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<ReviewsCreateOrConnectWithoutUsersInput>
    upsert?: Enumerable<ReviewsUpsertWithWhereUniqueWithoutUsersInput>
    createMany?: ReviewsCreateManyUsersInputEnvelope
    set?: Enumerable<ReviewsWhereUniqueInput>
    disconnect?: Enumerable<ReviewsWhereUniqueInput>
    delete?: Enumerable<ReviewsWhereUniqueInput>
    connect?: Enumerable<ReviewsWhereUniqueInput>
    update?: Enumerable<ReviewsUpdateWithWhereUniqueWithoutUsersInput>
    updateMany?: Enumerable<ReviewsUpdateManyWithWhereWithoutUsersInput>
    deleteMany?: Enumerable<ReviewsScalarWhereInput>
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type OrdersUncheckedUpdateManyWithoutUsersNestedInput = {
    create?: XOR<Enumerable<OrdersCreateWithoutUsersInput>, Enumerable<OrdersUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<OrdersCreateOrConnectWithoutUsersInput>
    upsert?: Enumerable<OrdersUpsertWithWhereUniqueWithoutUsersInput>
    createMany?: OrdersCreateManyUsersInputEnvelope
    set?: Enumerable<OrdersWhereUniqueInput>
    disconnect?: Enumerable<OrdersWhereUniqueInput>
    delete?: Enumerable<OrdersWhereUniqueInput>
    connect?: Enumerable<OrdersWhereUniqueInput>
    update?: Enumerable<OrdersUpdateWithWhereUniqueWithoutUsersInput>
    updateMany?: Enumerable<OrdersUpdateManyWithWhereWithoutUsersInput>
    deleteMany?: Enumerable<OrdersScalarWhereInput>
  }

  export type ReviewsUncheckedUpdateManyWithoutUsersNestedInput = {
    create?: XOR<Enumerable<ReviewsCreateWithoutUsersInput>, Enumerable<ReviewsUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<ReviewsCreateOrConnectWithoutUsersInput>
    upsert?: Enumerable<ReviewsUpsertWithWhereUniqueWithoutUsersInput>
    createMany?: ReviewsCreateManyUsersInputEnvelope
    set?: Enumerable<ReviewsWhereUniqueInput>
    disconnect?: Enumerable<ReviewsWhereUniqueInput>
    delete?: Enumerable<ReviewsWhereUniqueInput>
    connect?: Enumerable<ReviewsWhereUniqueInput>
    update?: Enumerable<ReviewsUpdateWithWhereUniqueWithoutUsersInput>
    updateMany?: Enumerable<ReviewsUpdateManyWithWhereWithoutUsersInput>
    deleteMany?: Enumerable<ReviewsScalarWhereInput>
  }

  export type UsersCreateNestedOneWithoutOrdersInput = {
    create?: XOR<UsersCreateWithoutOrdersInput, UsersUncheckedCreateWithoutOrdersInput>
    connectOrCreate?: UsersCreateOrConnectWithoutOrdersInput
    connect?: UsersWhereUniqueInput
  }

  export type Order_ItemsCreateNestedManyWithoutOrdersInput = {
    create?: XOR<Enumerable<Order_ItemsCreateWithoutOrdersInput>, Enumerable<Order_ItemsUncheckedCreateWithoutOrdersInput>>
    connectOrCreate?: Enumerable<Order_ItemsCreateOrConnectWithoutOrdersInput>
    createMany?: Order_ItemsCreateManyOrdersInputEnvelope
    connect?: Enumerable<Order_ItemsWhereUniqueInput>
  }

  export type Order_ItemsUncheckedCreateNestedManyWithoutOrdersInput = {
    create?: XOR<Enumerable<Order_ItemsCreateWithoutOrdersInput>, Enumerable<Order_ItemsUncheckedCreateWithoutOrdersInput>>
    connectOrCreate?: Enumerable<Order_ItemsCreateOrConnectWithoutOrdersInput>
    createMany?: Order_ItemsCreateManyOrdersInputEnvelope
    connect?: Enumerable<Order_ItemsWhereUniqueInput>
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type UsersUpdateOneWithoutOrdersNestedInput = {
    create?: XOR<UsersCreateWithoutOrdersInput, UsersUncheckedCreateWithoutOrdersInput>
    connectOrCreate?: UsersCreateOrConnectWithoutOrdersInput
    upsert?: UsersUpsertWithoutOrdersInput
    disconnect?: boolean
    delete?: boolean
    connect?: UsersWhereUniqueInput
    update?: XOR<UsersUpdateWithoutOrdersInput, UsersUncheckedUpdateWithoutOrdersInput>
  }

  export type Order_ItemsUpdateManyWithoutOrdersNestedInput = {
    create?: XOR<Enumerable<Order_ItemsCreateWithoutOrdersInput>, Enumerable<Order_ItemsUncheckedCreateWithoutOrdersInput>>
    connectOrCreate?: Enumerable<Order_ItemsCreateOrConnectWithoutOrdersInput>
    upsert?: Enumerable<Order_ItemsUpsertWithWhereUniqueWithoutOrdersInput>
    createMany?: Order_ItemsCreateManyOrdersInputEnvelope
    set?: Enumerable<Order_ItemsWhereUniqueInput>
    disconnect?: Enumerable<Order_ItemsWhereUniqueInput>
    delete?: Enumerable<Order_ItemsWhereUniqueInput>
    connect?: Enumerable<Order_ItemsWhereUniqueInput>
    update?: Enumerable<Order_ItemsUpdateWithWhereUniqueWithoutOrdersInput>
    updateMany?: Enumerable<Order_ItemsUpdateManyWithWhereWithoutOrdersInput>
    deleteMany?: Enumerable<Order_ItemsScalarWhereInput>
  }

  export type Order_ItemsUncheckedUpdateManyWithoutOrdersNestedInput = {
    create?: XOR<Enumerable<Order_ItemsCreateWithoutOrdersInput>, Enumerable<Order_ItemsUncheckedCreateWithoutOrdersInput>>
    connectOrCreate?: Enumerable<Order_ItemsCreateOrConnectWithoutOrdersInput>
    upsert?: Enumerable<Order_ItemsUpsertWithWhereUniqueWithoutOrdersInput>
    createMany?: Order_ItemsCreateManyOrdersInputEnvelope
    set?: Enumerable<Order_ItemsWhereUniqueInput>
    disconnect?: Enumerable<Order_ItemsWhereUniqueInput>
    delete?: Enumerable<Order_ItemsWhereUniqueInput>
    connect?: Enumerable<Order_ItemsWhereUniqueInput>
    update?: Enumerable<Order_ItemsUpdateWithWhereUniqueWithoutOrdersInput>
    updateMany?: Enumerable<Order_ItemsUpdateManyWithWhereWithoutOrdersInput>
    deleteMany?: Enumerable<Order_ItemsScalarWhereInput>
  }

  export type Order_ItemsCreateNestedManyWithoutItemsInput = {
    create?: XOR<Enumerable<Order_ItemsCreateWithoutItemsInput>, Enumerable<Order_ItemsUncheckedCreateWithoutItemsInput>>
    connectOrCreate?: Enumerable<Order_ItemsCreateOrConnectWithoutItemsInput>
    createMany?: Order_ItemsCreateManyItemsInputEnvelope
    connect?: Enumerable<Order_ItemsWhereUniqueInput>
  }

  export type Item_ReviewsCreateNestedManyWithoutItemsInput = {
    create?: XOR<Enumerable<Item_ReviewsCreateWithoutItemsInput>, Enumerable<Item_ReviewsUncheckedCreateWithoutItemsInput>>
    connectOrCreate?: Enumerable<Item_ReviewsCreateOrConnectWithoutItemsInput>
    createMany?: Item_ReviewsCreateManyItemsInputEnvelope
    connect?: Enumerable<Item_ReviewsWhereUniqueInput>
  }

  export type CategoryCreateNestedOneWithoutItemsInput = {
    create?: XOR<CategoryCreateWithoutItemsInput, CategoryUncheckedCreateWithoutItemsInput>
    connectOrCreate?: CategoryCreateOrConnectWithoutItemsInput
    connect?: CategoryWhereUniqueInput
  }

  export type Order_ItemsUncheckedCreateNestedManyWithoutItemsInput = {
    create?: XOR<Enumerable<Order_ItemsCreateWithoutItemsInput>, Enumerable<Order_ItemsUncheckedCreateWithoutItemsInput>>
    connectOrCreate?: Enumerable<Order_ItemsCreateOrConnectWithoutItemsInput>
    createMany?: Order_ItemsCreateManyItemsInputEnvelope
    connect?: Enumerable<Order_ItemsWhereUniqueInput>
  }

  export type Item_ReviewsUncheckedCreateNestedManyWithoutItemsInput = {
    create?: XOR<Enumerable<Item_ReviewsCreateWithoutItemsInput>, Enumerable<Item_ReviewsUncheckedCreateWithoutItemsInput>>
    connectOrCreate?: Enumerable<Item_ReviewsCreateOrConnectWithoutItemsInput>
    createMany?: Item_ReviewsCreateManyItemsInputEnvelope
    connect?: Enumerable<Item_ReviewsWhereUniqueInput>
  }

  export type Order_ItemsUpdateManyWithoutItemsNestedInput = {
    create?: XOR<Enumerable<Order_ItemsCreateWithoutItemsInput>, Enumerable<Order_ItemsUncheckedCreateWithoutItemsInput>>
    connectOrCreate?: Enumerable<Order_ItemsCreateOrConnectWithoutItemsInput>
    upsert?: Enumerable<Order_ItemsUpsertWithWhereUniqueWithoutItemsInput>
    createMany?: Order_ItemsCreateManyItemsInputEnvelope
    set?: Enumerable<Order_ItemsWhereUniqueInput>
    disconnect?: Enumerable<Order_ItemsWhereUniqueInput>
    delete?: Enumerable<Order_ItemsWhereUniqueInput>
    connect?: Enumerable<Order_ItemsWhereUniqueInput>
    update?: Enumerable<Order_ItemsUpdateWithWhereUniqueWithoutItemsInput>
    updateMany?: Enumerable<Order_ItemsUpdateManyWithWhereWithoutItemsInput>
    deleteMany?: Enumerable<Order_ItemsScalarWhereInput>
  }

  export type Item_ReviewsUpdateManyWithoutItemsNestedInput = {
    create?: XOR<Enumerable<Item_ReviewsCreateWithoutItemsInput>, Enumerable<Item_ReviewsUncheckedCreateWithoutItemsInput>>
    connectOrCreate?: Enumerable<Item_ReviewsCreateOrConnectWithoutItemsInput>
    upsert?: Enumerable<Item_ReviewsUpsertWithWhereUniqueWithoutItemsInput>
    createMany?: Item_ReviewsCreateManyItemsInputEnvelope
    set?: Enumerable<Item_ReviewsWhereUniqueInput>
    disconnect?: Enumerable<Item_ReviewsWhereUniqueInput>
    delete?: Enumerable<Item_ReviewsWhereUniqueInput>
    connect?: Enumerable<Item_ReviewsWhereUniqueInput>
    update?: Enumerable<Item_ReviewsUpdateWithWhereUniqueWithoutItemsInput>
    updateMany?: Enumerable<Item_ReviewsUpdateManyWithWhereWithoutItemsInput>
    deleteMany?: Enumerable<Item_ReviewsScalarWhereInput>
  }

  export type CategoryUpdateOneWithoutItemsNestedInput = {
    create?: XOR<CategoryCreateWithoutItemsInput, CategoryUncheckedCreateWithoutItemsInput>
    connectOrCreate?: CategoryCreateOrConnectWithoutItemsInput
    upsert?: CategoryUpsertWithoutItemsInput
    disconnect?: boolean
    delete?: boolean
    connect?: CategoryWhereUniqueInput
    update?: XOR<CategoryUpdateWithoutItemsInput, CategoryUncheckedUpdateWithoutItemsInput>
  }

  export type Order_ItemsUncheckedUpdateManyWithoutItemsNestedInput = {
    create?: XOR<Enumerable<Order_ItemsCreateWithoutItemsInput>, Enumerable<Order_ItemsUncheckedCreateWithoutItemsInput>>
    connectOrCreate?: Enumerable<Order_ItemsCreateOrConnectWithoutItemsInput>
    upsert?: Enumerable<Order_ItemsUpsertWithWhereUniqueWithoutItemsInput>
    createMany?: Order_ItemsCreateManyItemsInputEnvelope
    set?: Enumerable<Order_ItemsWhereUniqueInput>
    disconnect?: Enumerable<Order_ItemsWhereUniqueInput>
    delete?: Enumerable<Order_ItemsWhereUniqueInput>
    connect?: Enumerable<Order_ItemsWhereUniqueInput>
    update?: Enumerable<Order_ItemsUpdateWithWhereUniqueWithoutItemsInput>
    updateMany?: Enumerable<Order_ItemsUpdateManyWithWhereWithoutItemsInput>
    deleteMany?: Enumerable<Order_ItemsScalarWhereInput>
  }

  export type Item_ReviewsUncheckedUpdateManyWithoutItemsNestedInput = {
    create?: XOR<Enumerable<Item_ReviewsCreateWithoutItemsInput>, Enumerable<Item_ReviewsUncheckedCreateWithoutItemsInput>>
    connectOrCreate?: Enumerable<Item_ReviewsCreateOrConnectWithoutItemsInput>
    upsert?: Enumerable<Item_ReviewsUpsertWithWhereUniqueWithoutItemsInput>
    createMany?: Item_ReviewsCreateManyItemsInputEnvelope
    set?: Enumerable<Item_ReviewsWhereUniqueInput>
    disconnect?: Enumerable<Item_ReviewsWhereUniqueInput>
    delete?: Enumerable<Item_ReviewsWhereUniqueInput>
    connect?: Enumerable<Item_ReviewsWhereUniqueInput>
    update?: Enumerable<Item_ReviewsUpdateWithWhereUniqueWithoutItemsInput>
    updateMany?: Enumerable<Item_ReviewsUpdateManyWithWhereWithoutItemsInput>
    deleteMany?: Enumerable<Item_ReviewsScalarWhereInput>
  }

  export type OrdersCreateNestedOneWithoutOrder_itemsInput = {
    create?: XOR<OrdersCreateWithoutOrder_itemsInput, OrdersUncheckedCreateWithoutOrder_itemsInput>
    connectOrCreate?: OrdersCreateOrConnectWithoutOrder_itemsInput
    connect?: OrdersWhereUniqueInput
  }

  export type ItemsCreateNestedOneWithoutOrder_itemsInput = {
    create?: XOR<ItemsCreateWithoutOrder_itemsInput, ItemsUncheckedCreateWithoutOrder_itemsInput>
    connectOrCreate?: ItemsCreateOrConnectWithoutOrder_itemsInput
    connect?: ItemsWhereUniqueInput
  }

  export type OrdersUpdateOneWithoutOrder_itemsNestedInput = {
    create?: XOR<OrdersCreateWithoutOrder_itemsInput, OrdersUncheckedCreateWithoutOrder_itemsInput>
    connectOrCreate?: OrdersCreateOrConnectWithoutOrder_itemsInput
    upsert?: OrdersUpsertWithoutOrder_itemsInput
    disconnect?: boolean
    delete?: boolean
    connect?: OrdersWhereUniqueInput
    update?: XOR<OrdersUpdateWithoutOrder_itemsInput, OrdersUncheckedUpdateWithoutOrder_itemsInput>
  }

  export type ItemsUpdateOneWithoutOrder_itemsNestedInput = {
    create?: XOR<ItemsCreateWithoutOrder_itemsInput, ItemsUncheckedCreateWithoutOrder_itemsInput>
    connectOrCreate?: ItemsCreateOrConnectWithoutOrder_itemsInput
    upsert?: ItemsUpsertWithoutOrder_itemsInput
    disconnect?: boolean
    delete?: boolean
    connect?: ItemsWhereUniqueInput
    update?: XOR<ItemsUpdateWithoutOrder_itemsInput, ItemsUncheckedUpdateWithoutOrder_itemsInput>
  }

  export type Item_ReviewsCreateNestedManyWithoutReviewsInput = {
    create?: XOR<Enumerable<Item_ReviewsCreateWithoutReviewsInput>, Enumerable<Item_ReviewsUncheckedCreateWithoutReviewsInput>>
    connectOrCreate?: Enumerable<Item_ReviewsCreateOrConnectWithoutReviewsInput>
    createMany?: Item_ReviewsCreateManyReviewsInputEnvelope
    connect?: Enumerable<Item_ReviewsWhereUniqueInput>
  }

  export type UsersCreateNestedOneWithoutReviewsInput = {
    create?: XOR<UsersCreateWithoutReviewsInput, UsersUncheckedCreateWithoutReviewsInput>
    connectOrCreate?: UsersCreateOrConnectWithoutReviewsInput
    connect?: UsersWhereUniqueInput
  }

  export type Item_ReviewsUncheckedCreateNestedManyWithoutReviewsInput = {
    create?: XOR<Enumerable<Item_ReviewsCreateWithoutReviewsInput>, Enumerable<Item_ReviewsUncheckedCreateWithoutReviewsInput>>
    connectOrCreate?: Enumerable<Item_ReviewsCreateOrConnectWithoutReviewsInput>
    createMany?: Item_ReviewsCreateManyReviewsInputEnvelope
    connect?: Enumerable<Item_ReviewsWhereUniqueInput>
  }

  export type Item_ReviewsUpdateManyWithoutReviewsNestedInput = {
    create?: XOR<Enumerable<Item_ReviewsCreateWithoutReviewsInput>, Enumerable<Item_ReviewsUncheckedCreateWithoutReviewsInput>>
    connectOrCreate?: Enumerable<Item_ReviewsCreateOrConnectWithoutReviewsInput>
    upsert?: Enumerable<Item_ReviewsUpsertWithWhereUniqueWithoutReviewsInput>
    createMany?: Item_ReviewsCreateManyReviewsInputEnvelope
    set?: Enumerable<Item_ReviewsWhereUniqueInput>
    disconnect?: Enumerable<Item_ReviewsWhereUniqueInput>
    delete?: Enumerable<Item_ReviewsWhereUniqueInput>
    connect?: Enumerable<Item_ReviewsWhereUniqueInput>
    update?: Enumerable<Item_ReviewsUpdateWithWhereUniqueWithoutReviewsInput>
    updateMany?: Enumerable<Item_ReviewsUpdateManyWithWhereWithoutReviewsInput>
    deleteMany?: Enumerable<Item_ReviewsScalarWhereInput>
  }

  export type UsersUpdateOneWithoutReviewsNestedInput = {
    create?: XOR<UsersCreateWithoutReviewsInput, UsersUncheckedCreateWithoutReviewsInput>
    connectOrCreate?: UsersCreateOrConnectWithoutReviewsInput
    upsert?: UsersUpsertWithoutReviewsInput
    disconnect?: boolean
    delete?: boolean
    connect?: UsersWhereUniqueInput
    update?: XOR<UsersUpdateWithoutReviewsInput, UsersUncheckedUpdateWithoutReviewsInput>
  }

  export type Item_ReviewsUncheckedUpdateManyWithoutReviewsNestedInput = {
    create?: XOR<Enumerable<Item_ReviewsCreateWithoutReviewsInput>, Enumerable<Item_ReviewsUncheckedCreateWithoutReviewsInput>>
    connectOrCreate?: Enumerable<Item_ReviewsCreateOrConnectWithoutReviewsInput>
    upsert?: Enumerable<Item_ReviewsUpsertWithWhereUniqueWithoutReviewsInput>
    createMany?: Item_ReviewsCreateManyReviewsInputEnvelope
    set?: Enumerable<Item_ReviewsWhereUniqueInput>
    disconnect?: Enumerable<Item_ReviewsWhereUniqueInput>
    delete?: Enumerable<Item_ReviewsWhereUniqueInput>
    connect?: Enumerable<Item_ReviewsWhereUniqueInput>
    update?: Enumerable<Item_ReviewsUpdateWithWhereUniqueWithoutReviewsInput>
    updateMany?: Enumerable<Item_ReviewsUpdateManyWithWhereWithoutReviewsInput>
    deleteMany?: Enumerable<Item_ReviewsScalarWhereInput>
  }

  export type ItemsCreateNestedOneWithoutItem_reviewsInput = {
    create?: XOR<ItemsCreateWithoutItem_reviewsInput, ItemsUncheckedCreateWithoutItem_reviewsInput>
    connectOrCreate?: ItemsCreateOrConnectWithoutItem_reviewsInput
    connect?: ItemsWhereUniqueInput
  }

  export type ReviewsCreateNestedOneWithoutItem_reviewsInput = {
    create?: XOR<ReviewsCreateWithoutItem_reviewsInput, ReviewsUncheckedCreateWithoutItem_reviewsInput>
    connectOrCreate?: ReviewsCreateOrConnectWithoutItem_reviewsInput
    connect?: ReviewsWhereUniqueInput
  }

  export type ItemsUpdateOneWithoutItem_reviewsNestedInput = {
    create?: XOR<ItemsCreateWithoutItem_reviewsInput, ItemsUncheckedCreateWithoutItem_reviewsInput>
    connectOrCreate?: ItemsCreateOrConnectWithoutItem_reviewsInput
    upsert?: ItemsUpsertWithoutItem_reviewsInput
    disconnect?: boolean
    delete?: boolean
    connect?: ItemsWhereUniqueInput
    update?: XOR<ItemsUpdateWithoutItem_reviewsInput, ItemsUncheckedUpdateWithoutItem_reviewsInput>
  }

  export type ReviewsUpdateOneWithoutItem_reviewsNestedInput = {
    create?: XOR<ReviewsCreateWithoutItem_reviewsInput, ReviewsUncheckedCreateWithoutItem_reviewsInput>
    connectOrCreate?: ReviewsCreateOrConnectWithoutItem_reviewsInput
    upsert?: ReviewsUpsertWithoutItem_reviewsInput
    disconnect?: boolean
    delete?: boolean
    connect?: ReviewsWhereUniqueInput
    update?: XOR<ReviewsUpdateWithoutItem_reviewsInput, ReviewsUncheckedUpdateWithoutItem_reviewsInput>
  }

  export type ItemsCreateNestedManyWithoutCategoryInput = {
    create?: XOR<Enumerable<ItemsCreateWithoutCategoryInput>, Enumerable<ItemsUncheckedCreateWithoutCategoryInput>>
    connectOrCreate?: Enumerable<ItemsCreateOrConnectWithoutCategoryInput>
    createMany?: ItemsCreateManyCategoryInputEnvelope
    connect?: Enumerable<ItemsWhereUniqueInput>
  }

  export type ItemsUncheckedCreateNestedManyWithoutCategoryInput = {
    create?: XOR<Enumerable<ItemsCreateWithoutCategoryInput>, Enumerable<ItemsUncheckedCreateWithoutCategoryInput>>
    connectOrCreate?: Enumerable<ItemsCreateOrConnectWithoutCategoryInput>
    createMany?: ItemsCreateManyCategoryInputEnvelope
    connect?: Enumerable<ItemsWhereUniqueInput>
  }

  export type ItemsUpdateManyWithoutCategoryNestedInput = {
    create?: XOR<Enumerable<ItemsCreateWithoutCategoryInput>, Enumerable<ItemsUncheckedCreateWithoutCategoryInput>>
    connectOrCreate?: Enumerable<ItemsCreateOrConnectWithoutCategoryInput>
    upsert?: Enumerable<ItemsUpsertWithWhereUniqueWithoutCategoryInput>
    createMany?: ItemsCreateManyCategoryInputEnvelope
    set?: Enumerable<ItemsWhereUniqueInput>
    disconnect?: Enumerable<ItemsWhereUniqueInput>
    delete?: Enumerable<ItemsWhereUniqueInput>
    connect?: Enumerable<ItemsWhereUniqueInput>
    update?: Enumerable<ItemsUpdateWithWhereUniqueWithoutCategoryInput>
    updateMany?: Enumerable<ItemsUpdateManyWithWhereWithoutCategoryInput>
    deleteMany?: Enumerable<ItemsScalarWhereInput>
  }

  export type ItemsUncheckedUpdateManyWithoutCategoryNestedInput = {
    create?: XOR<Enumerable<ItemsCreateWithoutCategoryInput>, Enumerable<ItemsUncheckedCreateWithoutCategoryInput>>
    connectOrCreate?: Enumerable<ItemsCreateOrConnectWithoutCategoryInput>
    upsert?: Enumerable<ItemsUpsertWithWhereUniqueWithoutCategoryInput>
    createMany?: ItemsCreateManyCategoryInputEnvelope
    set?: Enumerable<ItemsWhereUniqueInput>
    disconnect?: Enumerable<ItemsWhereUniqueInput>
    delete?: Enumerable<ItemsWhereUniqueInput>
    connect?: Enumerable<ItemsWhereUniqueInput>
    update?: Enumerable<ItemsUpdateWithWhereUniqueWithoutCategoryInput>
    updateMany?: Enumerable<ItemsUpdateManyWithWhereWithoutCategoryInput>
    deleteMany?: Enumerable<ItemsScalarWhereInput>
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedBoolNullableFilter = {
    equals?: boolean | null
    not?: NestedBoolNullableFilter | boolean | null
  }

  export type NestedIntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type NestedFloatFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type NestedStringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type NestedBoolNullableWithAggregatesFilter = {
    equals?: boolean | null
    not?: NestedBoolNullableWithAggregatesFilter | boolean | null
    _count?: NestedIntNullableFilter
    _min?: NestedBoolNullableFilter
    _max?: NestedBoolNullableFilter
  }

  export type NestedIntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type NestedBoolFilter = {
    equals?: boolean
    not?: NestedBoolFilter | boolean
  }

  export type NestedBoolWithAggregatesFilter = {
    equals?: boolean
    not?: NestedBoolWithAggregatesFilter | boolean
    _count?: NestedIntFilter
    _min?: NestedBoolFilter
    _max?: NestedBoolFilter
  }

  export type OrdersCreateWithoutUsersInput = {
    status: string
    is_cart?: boolean
    order_items?: Order_ItemsCreateNestedManyWithoutOrdersInput
  }

  export type OrdersUncheckedCreateWithoutUsersInput = {
    id?: number
    status: string
    is_cart?: boolean
    order_items?: Order_ItemsUncheckedCreateNestedManyWithoutOrdersInput
  }

  export type OrdersCreateOrConnectWithoutUsersInput = {
    where: OrdersWhereUniqueInput
    create: XOR<OrdersCreateWithoutUsersInput, OrdersUncheckedCreateWithoutUsersInput>
  }

  export type OrdersCreateManyUsersInputEnvelope = {
    data: Enumerable<OrdersCreateManyUsersInput>
    skipDuplicates?: boolean
  }

  export type ReviewsCreateWithoutUsersInput = {
    title: string
    stars: number
    content: string
    item_reviews?: Item_ReviewsCreateNestedManyWithoutReviewsInput
  }

  export type ReviewsUncheckedCreateWithoutUsersInput = {
    id?: number
    title: string
    stars: number
    content: string
    item_reviews?: Item_ReviewsUncheckedCreateNestedManyWithoutReviewsInput
  }

  export type ReviewsCreateOrConnectWithoutUsersInput = {
    where: ReviewsWhereUniqueInput
    create: XOR<ReviewsCreateWithoutUsersInput, ReviewsUncheckedCreateWithoutUsersInput>
  }

  export type ReviewsCreateManyUsersInputEnvelope = {
    data: Enumerable<ReviewsCreateManyUsersInput>
    skipDuplicates?: boolean
  }

  export type OrdersUpsertWithWhereUniqueWithoutUsersInput = {
    where: OrdersWhereUniqueInput
    update: XOR<OrdersUpdateWithoutUsersInput, OrdersUncheckedUpdateWithoutUsersInput>
    create: XOR<OrdersCreateWithoutUsersInput, OrdersUncheckedCreateWithoutUsersInput>
  }

  export type OrdersUpdateWithWhereUniqueWithoutUsersInput = {
    where: OrdersWhereUniqueInput
    data: XOR<OrdersUpdateWithoutUsersInput, OrdersUncheckedUpdateWithoutUsersInput>
  }

  export type OrdersUpdateManyWithWhereWithoutUsersInput = {
    where: OrdersScalarWhereInput
    data: XOR<OrdersUpdateManyMutationInput, OrdersUncheckedUpdateManyWithoutOrdersInput>
  }

  export type OrdersScalarWhereInput = {
    AND?: Enumerable<OrdersScalarWhereInput>
    OR?: Enumerable<OrdersScalarWhereInput>
    NOT?: Enumerable<OrdersScalarWhereInput>
    id?: IntFilter | number
    userId?: IntFilter | number
    status?: StringFilter | string
    is_cart?: BoolFilter | boolean
  }

  export type ReviewsUpsertWithWhereUniqueWithoutUsersInput = {
    where: ReviewsWhereUniqueInput
    update: XOR<ReviewsUpdateWithoutUsersInput, ReviewsUncheckedUpdateWithoutUsersInput>
    create: XOR<ReviewsCreateWithoutUsersInput, ReviewsUncheckedCreateWithoutUsersInput>
  }

  export type ReviewsUpdateWithWhereUniqueWithoutUsersInput = {
    where: ReviewsWhereUniqueInput
    data: XOR<ReviewsUpdateWithoutUsersInput, ReviewsUncheckedUpdateWithoutUsersInput>
  }

  export type ReviewsUpdateManyWithWhereWithoutUsersInput = {
    where: ReviewsScalarWhereInput
    data: XOR<ReviewsUpdateManyMutationInput, ReviewsUncheckedUpdateManyWithoutReviewsInput>
  }

  export type ReviewsScalarWhereInput = {
    AND?: Enumerable<ReviewsScalarWhereInput>
    OR?: Enumerable<ReviewsScalarWhereInput>
    NOT?: Enumerable<ReviewsScalarWhereInput>
    id?: IntFilter | number
    title?: StringFilter | string
    stars?: IntFilter | number
    content?: StringFilter | string
    userId?: IntFilter | number
  }

  export type UsersCreateWithoutOrdersInput = {
    username: string
    password: string
    email: string
    is_admin?: boolean | null
    reviews?: ReviewsCreateNestedManyWithoutUsersInput
  }

  export type UsersUncheckedCreateWithoutOrdersInput = {
    id?: number
    username: string
    password: string
    email: string
    is_admin?: boolean | null
    reviews?: ReviewsUncheckedCreateNestedManyWithoutUsersInput
  }

  export type UsersCreateOrConnectWithoutOrdersInput = {
    where: UsersWhereUniqueInput
    create: XOR<UsersCreateWithoutOrdersInput, UsersUncheckedCreateWithoutOrdersInput>
  }

  export type Order_ItemsCreateWithoutOrdersInput = {
    quantity: number
    items?: ItemsCreateNestedOneWithoutOrder_itemsInput
  }

  export type Order_ItemsUncheckedCreateWithoutOrdersInput = {
    id?: number
    itemId: number
    quantity: number
  }

  export type Order_ItemsCreateOrConnectWithoutOrdersInput = {
    where: Order_ItemsWhereUniqueInput
    create: XOR<Order_ItemsCreateWithoutOrdersInput, Order_ItemsUncheckedCreateWithoutOrdersInput>
  }

  export type Order_ItemsCreateManyOrdersInputEnvelope = {
    data: Enumerable<Order_ItemsCreateManyOrdersInput>
    skipDuplicates?: boolean
  }

  export type UsersUpsertWithoutOrdersInput = {
    update: XOR<UsersUpdateWithoutOrdersInput, UsersUncheckedUpdateWithoutOrdersInput>
    create: XOR<UsersCreateWithoutOrdersInput, UsersUncheckedCreateWithoutOrdersInput>
  }

  export type UsersUpdateWithoutOrdersInput = {
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    is_admin?: NullableBoolFieldUpdateOperationsInput | boolean | null
    reviews?: ReviewsUpdateManyWithoutUsersNestedInput
  }

  export type UsersUncheckedUpdateWithoutOrdersInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    is_admin?: NullableBoolFieldUpdateOperationsInput | boolean | null
    reviews?: ReviewsUncheckedUpdateManyWithoutUsersNestedInput
  }

  export type Order_ItemsUpsertWithWhereUniqueWithoutOrdersInput = {
    where: Order_ItemsWhereUniqueInput
    update: XOR<Order_ItemsUpdateWithoutOrdersInput, Order_ItemsUncheckedUpdateWithoutOrdersInput>
    create: XOR<Order_ItemsCreateWithoutOrdersInput, Order_ItemsUncheckedCreateWithoutOrdersInput>
  }

  export type Order_ItemsUpdateWithWhereUniqueWithoutOrdersInput = {
    where: Order_ItemsWhereUniqueInput
    data: XOR<Order_ItemsUpdateWithoutOrdersInput, Order_ItemsUncheckedUpdateWithoutOrdersInput>
  }

  export type Order_ItemsUpdateManyWithWhereWithoutOrdersInput = {
    where: Order_ItemsScalarWhereInput
    data: XOR<Order_ItemsUpdateManyMutationInput, Order_ItemsUncheckedUpdateManyWithoutOrder_itemsInput>
  }

  export type Order_ItemsScalarWhereInput = {
    AND?: Enumerable<Order_ItemsScalarWhereInput>
    OR?: Enumerable<Order_ItemsScalarWhereInput>
    NOT?: Enumerable<Order_ItemsScalarWhereInput>
    id?: IntFilter | number
    orderId?: IntFilter | number
    itemId?: IntFilter | number
    quantity?: IntFilter | number
  }

  export type Order_ItemsCreateWithoutItemsInput = {
    quantity: number
    orders?: OrdersCreateNestedOneWithoutOrder_itemsInput
  }

  export type Order_ItemsUncheckedCreateWithoutItemsInput = {
    id?: number
    orderId: number
    quantity: number
  }

  export type Order_ItemsCreateOrConnectWithoutItemsInput = {
    where: Order_ItemsWhereUniqueInput
    create: XOR<Order_ItemsCreateWithoutItemsInput, Order_ItemsUncheckedCreateWithoutItemsInput>
  }

  export type Order_ItemsCreateManyItemsInputEnvelope = {
    data: Enumerable<Order_ItemsCreateManyItemsInput>
    skipDuplicates?: boolean
  }

  export type Item_ReviewsCreateWithoutItemsInput = {
    reviews?: ReviewsCreateNestedOneWithoutItem_reviewsInput
  }

  export type Item_ReviewsUncheckedCreateWithoutItemsInput = {
    id?: number
    reviewId: number
  }

  export type Item_ReviewsCreateOrConnectWithoutItemsInput = {
    where: Item_ReviewsWhereUniqueInput
    create: XOR<Item_ReviewsCreateWithoutItemsInput, Item_ReviewsUncheckedCreateWithoutItemsInput>
  }

  export type Item_ReviewsCreateManyItemsInputEnvelope = {
    data: Enumerable<Item_ReviewsCreateManyItemsInput>
    skipDuplicates?: boolean
  }

  export type CategoryCreateWithoutItemsInput = {
    name: string
  }

  export type CategoryUncheckedCreateWithoutItemsInput = {
    id?: number
    name: string
  }

  export type CategoryCreateOrConnectWithoutItemsInput = {
    where: CategoryWhereUniqueInput
    create: XOR<CategoryCreateWithoutItemsInput, CategoryUncheckedCreateWithoutItemsInput>
  }

  export type Order_ItemsUpsertWithWhereUniqueWithoutItemsInput = {
    where: Order_ItemsWhereUniqueInput
    update: XOR<Order_ItemsUpdateWithoutItemsInput, Order_ItemsUncheckedUpdateWithoutItemsInput>
    create: XOR<Order_ItemsCreateWithoutItemsInput, Order_ItemsUncheckedCreateWithoutItemsInput>
  }

  export type Order_ItemsUpdateWithWhereUniqueWithoutItemsInput = {
    where: Order_ItemsWhereUniqueInput
    data: XOR<Order_ItemsUpdateWithoutItemsInput, Order_ItemsUncheckedUpdateWithoutItemsInput>
  }

  export type Order_ItemsUpdateManyWithWhereWithoutItemsInput = {
    where: Order_ItemsScalarWhereInput
    data: XOR<Order_ItemsUpdateManyMutationInput, Order_ItemsUncheckedUpdateManyWithoutOrder_itemsInput>
  }

  export type Item_ReviewsUpsertWithWhereUniqueWithoutItemsInput = {
    where: Item_ReviewsWhereUniqueInput
    update: XOR<Item_ReviewsUpdateWithoutItemsInput, Item_ReviewsUncheckedUpdateWithoutItemsInput>
    create: XOR<Item_ReviewsCreateWithoutItemsInput, Item_ReviewsUncheckedCreateWithoutItemsInput>
  }

  export type Item_ReviewsUpdateWithWhereUniqueWithoutItemsInput = {
    where: Item_ReviewsWhereUniqueInput
    data: XOR<Item_ReviewsUpdateWithoutItemsInput, Item_ReviewsUncheckedUpdateWithoutItemsInput>
  }

  export type Item_ReviewsUpdateManyWithWhereWithoutItemsInput = {
    where: Item_ReviewsScalarWhereInput
    data: XOR<Item_ReviewsUpdateManyMutationInput, Item_ReviewsUncheckedUpdateManyWithoutItem_reviewsInput>
  }

  export type Item_ReviewsScalarWhereInput = {
    AND?: Enumerable<Item_ReviewsScalarWhereInput>
    OR?: Enumerable<Item_ReviewsScalarWhereInput>
    NOT?: Enumerable<Item_ReviewsScalarWhereInput>
    id?: IntFilter | number
    itemId?: IntFilter | number
    reviewId?: IntFilter | number
  }

  export type CategoryUpsertWithoutItemsInput = {
    update: XOR<CategoryUpdateWithoutItemsInput, CategoryUncheckedUpdateWithoutItemsInput>
    create: XOR<CategoryCreateWithoutItemsInput, CategoryUncheckedCreateWithoutItemsInput>
  }

  export type CategoryUpdateWithoutItemsInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type CategoryUncheckedUpdateWithoutItemsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type OrdersCreateWithoutOrder_itemsInput = {
    status: string
    is_cart?: boolean
    users?: UsersCreateNestedOneWithoutOrdersInput
  }

  export type OrdersUncheckedCreateWithoutOrder_itemsInput = {
    id?: number
    userId: number
    status: string
    is_cart?: boolean
  }

  export type OrdersCreateOrConnectWithoutOrder_itemsInput = {
    where: OrdersWhereUniqueInput
    create: XOR<OrdersCreateWithoutOrder_itemsInput, OrdersUncheckedCreateWithoutOrder_itemsInput>
  }

  export type ItemsCreateWithoutOrder_itemsInput = {
    name: string
    description: string
    stockQty: number
    isFeatured?: boolean
    onSale?: boolean
    imageUrl: string
    item_reviews?: Item_ReviewsCreateNestedManyWithoutItemsInput
    category?: CategoryCreateNestedOneWithoutItemsInput
  }

  export type ItemsUncheckedCreateWithoutOrder_itemsInput = {
    id?: number
    name: string
    description: string
    stockQty: number
    isFeatured?: boolean
    onSale?: boolean
    imageUrl: string
    categoryId: number
    item_reviews?: Item_ReviewsUncheckedCreateNestedManyWithoutItemsInput
  }

  export type ItemsCreateOrConnectWithoutOrder_itemsInput = {
    where: ItemsWhereUniqueInput
    create: XOR<ItemsCreateWithoutOrder_itemsInput, ItemsUncheckedCreateWithoutOrder_itemsInput>
  }

  export type OrdersUpsertWithoutOrder_itemsInput = {
    update: XOR<OrdersUpdateWithoutOrder_itemsInput, OrdersUncheckedUpdateWithoutOrder_itemsInput>
    create: XOR<OrdersCreateWithoutOrder_itemsInput, OrdersUncheckedCreateWithoutOrder_itemsInput>
  }

  export type OrdersUpdateWithoutOrder_itemsInput = {
    status?: StringFieldUpdateOperationsInput | string
    is_cart?: BoolFieldUpdateOperationsInput | boolean
    users?: UsersUpdateOneWithoutOrdersNestedInput
  }

  export type OrdersUncheckedUpdateWithoutOrder_itemsInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    is_cart?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ItemsUpsertWithoutOrder_itemsInput = {
    update: XOR<ItemsUpdateWithoutOrder_itemsInput, ItemsUncheckedUpdateWithoutOrder_itemsInput>
    create: XOR<ItemsCreateWithoutOrder_itemsInput, ItemsUncheckedCreateWithoutOrder_itemsInput>
  }

  export type ItemsUpdateWithoutOrder_itemsInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    stockQty?: IntFieldUpdateOperationsInput | number
    isFeatured?: BoolFieldUpdateOperationsInput | boolean
    onSale?: BoolFieldUpdateOperationsInput | boolean
    imageUrl?: StringFieldUpdateOperationsInput | string
    item_reviews?: Item_ReviewsUpdateManyWithoutItemsNestedInput
    category?: CategoryUpdateOneWithoutItemsNestedInput
  }

  export type ItemsUncheckedUpdateWithoutOrder_itemsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    stockQty?: IntFieldUpdateOperationsInput | number
    isFeatured?: BoolFieldUpdateOperationsInput | boolean
    onSale?: BoolFieldUpdateOperationsInput | boolean
    imageUrl?: StringFieldUpdateOperationsInput | string
    categoryId?: IntFieldUpdateOperationsInput | number
    item_reviews?: Item_ReviewsUncheckedUpdateManyWithoutItemsNestedInput
  }

  export type Item_ReviewsCreateWithoutReviewsInput = {
    items?: ItemsCreateNestedOneWithoutItem_reviewsInput
  }

  export type Item_ReviewsUncheckedCreateWithoutReviewsInput = {
    id?: number
    itemId: number
  }

  export type Item_ReviewsCreateOrConnectWithoutReviewsInput = {
    where: Item_ReviewsWhereUniqueInput
    create: XOR<Item_ReviewsCreateWithoutReviewsInput, Item_ReviewsUncheckedCreateWithoutReviewsInput>
  }

  export type Item_ReviewsCreateManyReviewsInputEnvelope = {
    data: Enumerable<Item_ReviewsCreateManyReviewsInput>
    skipDuplicates?: boolean
  }

  export type UsersCreateWithoutReviewsInput = {
    username: string
    password: string
    email: string
    is_admin?: boolean | null
    orders?: OrdersCreateNestedManyWithoutUsersInput
  }

  export type UsersUncheckedCreateWithoutReviewsInput = {
    id?: number
    username: string
    password: string
    email: string
    is_admin?: boolean | null
    orders?: OrdersUncheckedCreateNestedManyWithoutUsersInput
  }

  export type UsersCreateOrConnectWithoutReviewsInput = {
    where: UsersWhereUniqueInput
    create: XOR<UsersCreateWithoutReviewsInput, UsersUncheckedCreateWithoutReviewsInput>
  }

  export type Item_ReviewsUpsertWithWhereUniqueWithoutReviewsInput = {
    where: Item_ReviewsWhereUniqueInput
    update: XOR<Item_ReviewsUpdateWithoutReviewsInput, Item_ReviewsUncheckedUpdateWithoutReviewsInput>
    create: XOR<Item_ReviewsCreateWithoutReviewsInput, Item_ReviewsUncheckedCreateWithoutReviewsInput>
  }

  export type Item_ReviewsUpdateWithWhereUniqueWithoutReviewsInput = {
    where: Item_ReviewsWhereUniqueInput
    data: XOR<Item_ReviewsUpdateWithoutReviewsInput, Item_ReviewsUncheckedUpdateWithoutReviewsInput>
  }

  export type Item_ReviewsUpdateManyWithWhereWithoutReviewsInput = {
    where: Item_ReviewsScalarWhereInput
    data: XOR<Item_ReviewsUpdateManyMutationInput, Item_ReviewsUncheckedUpdateManyWithoutItem_reviewsInput>
  }

  export type UsersUpsertWithoutReviewsInput = {
    update: XOR<UsersUpdateWithoutReviewsInput, UsersUncheckedUpdateWithoutReviewsInput>
    create: XOR<UsersCreateWithoutReviewsInput, UsersUncheckedCreateWithoutReviewsInput>
  }

  export type UsersUpdateWithoutReviewsInput = {
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    is_admin?: NullableBoolFieldUpdateOperationsInput | boolean | null
    orders?: OrdersUpdateManyWithoutUsersNestedInput
  }

  export type UsersUncheckedUpdateWithoutReviewsInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    is_admin?: NullableBoolFieldUpdateOperationsInput | boolean | null
    orders?: OrdersUncheckedUpdateManyWithoutUsersNestedInput
  }

  export type ItemsCreateWithoutItem_reviewsInput = {
    name: string
    description: string
    stockQty: number
    isFeatured?: boolean
    onSale?: boolean
    imageUrl: string
    order_items?: Order_ItemsCreateNestedManyWithoutItemsInput
    category?: CategoryCreateNestedOneWithoutItemsInput
  }

  export type ItemsUncheckedCreateWithoutItem_reviewsInput = {
    id?: number
    name: string
    description: string
    stockQty: number
    isFeatured?: boolean
    onSale?: boolean
    imageUrl: string
    categoryId: number
    order_items?: Order_ItemsUncheckedCreateNestedManyWithoutItemsInput
  }

  export type ItemsCreateOrConnectWithoutItem_reviewsInput = {
    where: ItemsWhereUniqueInput
    create: XOR<ItemsCreateWithoutItem_reviewsInput, ItemsUncheckedCreateWithoutItem_reviewsInput>
  }

  export type ReviewsCreateWithoutItem_reviewsInput = {
    title: string
    stars: number
    content: string
    users?: UsersCreateNestedOneWithoutReviewsInput
  }

  export type ReviewsUncheckedCreateWithoutItem_reviewsInput = {
    id?: number
    title: string
    stars: number
    content: string
    userId: number
  }

  export type ReviewsCreateOrConnectWithoutItem_reviewsInput = {
    where: ReviewsWhereUniqueInput
    create: XOR<ReviewsCreateWithoutItem_reviewsInput, ReviewsUncheckedCreateWithoutItem_reviewsInput>
  }

  export type ItemsUpsertWithoutItem_reviewsInput = {
    update: XOR<ItemsUpdateWithoutItem_reviewsInput, ItemsUncheckedUpdateWithoutItem_reviewsInput>
    create: XOR<ItemsCreateWithoutItem_reviewsInput, ItemsUncheckedCreateWithoutItem_reviewsInput>
  }

  export type ItemsUpdateWithoutItem_reviewsInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    stockQty?: IntFieldUpdateOperationsInput | number
    isFeatured?: BoolFieldUpdateOperationsInput | boolean
    onSale?: BoolFieldUpdateOperationsInput | boolean
    imageUrl?: StringFieldUpdateOperationsInput | string
    order_items?: Order_ItemsUpdateManyWithoutItemsNestedInput
    category?: CategoryUpdateOneWithoutItemsNestedInput
  }

  export type ItemsUncheckedUpdateWithoutItem_reviewsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    stockQty?: IntFieldUpdateOperationsInput | number
    isFeatured?: BoolFieldUpdateOperationsInput | boolean
    onSale?: BoolFieldUpdateOperationsInput | boolean
    imageUrl?: StringFieldUpdateOperationsInput | string
    categoryId?: IntFieldUpdateOperationsInput | number
    order_items?: Order_ItemsUncheckedUpdateManyWithoutItemsNestedInput
  }

  export type ReviewsUpsertWithoutItem_reviewsInput = {
    update: XOR<ReviewsUpdateWithoutItem_reviewsInput, ReviewsUncheckedUpdateWithoutItem_reviewsInput>
    create: XOR<ReviewsCreateWithoutItem_reviewsInput, ReviewsUncheckedCreateWithoutItem_reviewsInput>
  }

  export type ReviewsUpdateWithoutItem_reviewsInput = {
    title?: StringFieldUpdateOperationsInput | string
    stars?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
    users?: UsersUpdateOneWithoutReviewsNestedInput
  }

  export type ReviewsUncheckedUpdateWithoutItem_reviewsInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    stars?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
  }

  export type ItemsCreateWithoutCategoryInput = {
    name: string
    description: string
    stockQty: number
    isFeatured?: boolean
    onSale?: boolean
    imageUrl: string
    order_items?: Order_ItemsCreateNestedManyWithoutItemsInput
    item_reviews?: Item_ReviewsCreateNestedManyWithoutItemsInput
  }

  export type ItemsUncheckedCreateWithoutCategoryInput = {
    id?: number
    name: string
    description: string
    stockQty: number
    isFeatured?: boolean
    onSale?: boolean
    imageUrl: string
    order_items?: Order_ItemsUncheckedCreateNestedManyWithoutItemsInput
    item_reviews?: Item_ReviewsUncheckedCreateNestedManyWithoutItemsInput
  }

  export type ItemsCreateOrConnectWithoutCategoryInput = {
    where: ItemsWhereUniqueInput
    create: XOR<ItemsCreateWithoutCategoryInput, ItemsUncheckedCreateWithoutCategoryInput>
  }

  export type ItemsCreateManyCategoryInputEnvelope = {
    data: Enumerable<ItemsCreateManyCategoryInput>
    skipDuplicates?: boolean
  }

  export type ItemsUpsertWithWhereUniqueWithoutCategoryInput = {
    where: ItemsWhereUniqueInput
    update: XOR<ItemsUpdateWithoutCategoryInput, ItemsUncheckedUpdateWithoutCategoryInput>
    create: XOR<ItemsCreateWithoutCategoryInput, ItemsUncheckedCreateWithoutCategoryInput>
  }

  export type ItemsUpdateWithWhereUniqueWithoutCategoryInput = {
    where: ItemsWhereUniqueInput
    data: XOR<ItemsUpdateWithoutCategoryInput, ItemsUncheckedUpdateWithoutCategoryInput>
  }

  export type ItemsUpdateManyWithWhereWithoutCategoryInput = {
    where: ItemsScalarWhereInput
    data: XOR<ItemsUpdateManyMutationInput, ItemsUncheckedUpdateManyWithoutItemsInput>
  }

  export type ItemsScalarWhereInput = {
    AND?: Enumerable<ItemsScalarWhereInput>
    OR?: Enumerable<ItemsScalarWhereInput>
    NOT?: Enumerable<ItemsScalarWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
    description?: StringFilter | string
    stockQty?: IntFilter | number
    isFeatured?: BoolFilter | boolean
    onSale?: BoolFilter | boolean
    imageUrl?: StringFilter | string
    categoryId?: IntFilter | number
  }

  export type OrdersCreateManyUsersInput = {
    id?: number
    status: string
    is_cart?: boolean
  }

  export type ReviewsCreateManyUsersInput = {
    id?: number
    title: string
    stars: number
    content: string
  }

  export type OrdersUpdateWithoutUsersInput = {
    status?: StringFieldUpdateOperationsInput | string
    is_cart?: BoolFieldUpdateOperationsInput | boolean
    order_items?: Order_ItemsUpdateManyWithoutOrdersNestedInput
  }

  export type OrdersUncheckedUpdateWithoutUsersInput = {
    id?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    is_cart?: BoolFieldUpdateOperationsInput | boolean
    order_items?: Order_ItemsUncheckedUpdateManyWithoutOrdersNestedInput
  }

  export type OrdersUncheckedUpdateManyWithoutOrdersInput = {
    id?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    is_cart?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ReviewsUpdateWithoutUsersInput = {
    title?: StringFieldUpdateOperationsInput | string
    stars?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
    item_reviews?: Item_ReviewsUpdateManyWithoutReviewsNestedInput
  }

  export type ReviewsUncheckedUpdateWithoutUsersInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    stars?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
    item_reviews?: Item_ReviewsUncheckedUpdateManyWithoutReviewsNestedInput
  }

  export type ReviewsUncheckedUpdateManyWithoutReviewsInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    stars?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
  }

  export type Order_ItemsCreateManyOrdersInput = {
    id?: number
    itemId: number
    quantity: number
  }

  export type Order_ItemsUpdateWithoutOrdersInput = {
    quantity?: IntFieldUpdateOperationsInput | number
    items?: ItemsUpdateOneWithoutOrder_itemsNestedInput
  }

  export type Order_ItemsUncheckedUpdateWithoutOrdersInput = {
    id?: IntFieldUpdateOperationsInput | number
    itemId?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
  }

  export type Order_ItemsUncheckedUpdateManyWithoutOrder_itemsInput = {
    id?: IntFieldUpdateOperationsInput | number
    itemId?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
  }

  export type Order_ItemsCreateManyItemsInput = {
    id?: number
    orderId: number
    quantity: number
  }

  export type Item_ReviewsCreateManyItemsInput = {
    id?: number
    reviewId: number
  }

  export type Order_ItemsUpdateWithoutItemsInput = {
    quantity?: IntFieldUpdateOperationsInput | number
    orders?: OrdersUpdateOneWithoutOrder_itemsNestedInput
  }

  export type Order_ItemsUncheckedUpdateWithoutItemsInput = {
    id?: IntFieldUpdateOperationsInput | number
    orderId?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
  }

  export type Item_ReviewsUpdateWithoutItemsInput = {
    reviews?: ReviewsUpdateOneWithoutItem_reviewsNestedInput
  }

  export type Item_ReviewsUncheckedUpdateWithoutItemsInput = {
    id?: IntFieldUpdateOperationsInput | number
    reviewId?: IntFieldUpdateOperationsInput | number
  }

  export type Item_ReviewsUncheckedUpdateManyWithoutItem_reviewsInput = {
    id?: IntFieldUpdateOperationsInput | number
    reviewId?: IntFieldUpdateOperationsInput | number
  }

  export type Item_ReviewsCreateManyReviewsInput = {
    id?: number
    itemId: number
  }

  export type Item_ReviewsUpdateWithoutReviewsInput = {
    items?: ItemsUpdateOneWithoutItem_reviewsNestedInput
  }

  export type Item_ReviewsUncheckedUpdateWithoutReviewsInput = {
    id?: IntFieldUpdateOperationsInput | number
    itemId?: IntFieldUpdateOperationsInput | number
  }

  export type ItemsCreateManyCategoryInput = {
    id?: number
    name: string
    description: string
    stockQty: number
    isFeatured?: boolean
    onSale?: boolean
    imageUrl: string
  }

  export type ItemsUpdateWithoutCategoryInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    stockQty?: IntFieldUpdateOperationsInput | number
    isFeatured?: BoolFieldUpdateOperationsInput | boolean
    onSale?: BoolFieldUpdateOperationsInput | boolean
    imageUrl?: StringFieldUpdateOperationsInput | string
    order_items?: Order_ItemsUpdateManyWithoutItemsNestedInput
    item_reviews?: Item_ReviewsUpdateManyWithoutItemsNestedInput
  }

  export type ItemsUncheckedUpdateWithoutCategoryInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    stockQty?: IntFieldUpdateOperationsInput | number
    isFeatured?: BoolFieldUpdateOperationsInput | boolean
    onSale?: BoolFieldUpdateOperationsInput | boolean
    imageUrl?: StringFieldUpdateOperationsInput | string
    order_items?: Order_ItemsUncheckedUpdateManyWithoutItemsNestedInput
    item_reviews?: Item_ReviewsUncheckedUpdateManyWithoutItemsNestedInput
  }

  export type ItemsUncheckedUpdateManyWithoutItemsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    stockQty?: IntFieldUpdateOperationsInput | number
    isFeatured?: BoolFieldUpdateOperationsInput | boolean
    onSale?: BoolFieldUpdateOperationsInput | boolean
    imageUrl?: StringFieldUpdateOperationsInput | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}